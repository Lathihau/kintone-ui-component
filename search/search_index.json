{
    "docs": [
        {
            "location": "/", 
            "text": "Home\n\n\nQuick start\n\n\n\n\nQuickStart Javascript\n\n\nQuickStart React\n\n\n\n\nReferences\n\n\n\n\nAlert\n\n\nButton\n\n\nCheckBox\n\n\nDropdown\n\n\nIconButton\n\n\nLabel\n\n\nMultipleChoice\n\n\nNotifyPopup\n\n\nRadioButton\n\n\nSpinner\n\n\nTable\n\n\nText", 
            "title": "Home"
        }, 
        {
            "location": "/#home", 
            "text": "", 
            "title": "Home"
        }, 
        {
            "location": "/#quick-start", 
            "text": "QuickStart Javascript  QuickStart React", 
            "title": "Quick start"
        }, 
        {
            "location": "/#references", 
            "text": "Alert  Button  CheckBox  Dropdown  IconButton  Label  MultipleChoice  NotifyPopup  RadioButton  Spinner  Table  Text", 
            "title": "References"
        }, 
        {
            "location": "/Getting-Started/QuickStart-Javascript/", 
            "text": "QuickStart Javascript\n\n\nCreate a customization\n\n\n\n\nAttach 2 below files from './dist' folder in \nkintone-ui-component\n into kintone app\n\n\n\n\n ./dist/kintone-ui-component.min.js\n ./dist/kintone-ui-component.min.css\n\n\n\n\n\n\nCreate index.js file\n\n\n\n\n(function () {\n    kintone.events.on(\napp.record.detail.show\n, function (ev) {\n      var kintoneSpaceElement = kintone.app.getHeaderSpaceElement();\n      var button = new kintoneUIComponent.Button({ text: 'Submit' });\n      kintoneSpaceElement.appendChild(button.render());\n      button.on('click', function(){\n        alert('This is my customization');\n      })\n    });\n  });\n\n\n\n\n\n\nAttach index.js file into \nkintone app setting", 
            "title": "QuickStart Javascript"
        }, 
        {
            "location": "/Getting-Started/QuickStart-Javascript/#quickstart-javascript", 
            "text": "", 
            "title": "QuickStart Javascript"
        }, 
        {
            "location": "/Getting-Started/QuickStart-Javascript/#create-a-customization", 
            "text": "Attach 2 below files from './dist' folder in  kintone-ui-component  into kintone app    ./dist/kintone-ui-component.min.js\n ./dist/kintone-ui-component.min.css   Create index.js file   (function () {\n    kintone.events.on( app.record.detail.show , function (ev) {\n      var kintoneSpaceElement = kintone.app.getHeaderSpaceElement();\n      var button = new kintoneUIComponent.Button({ text: 'Submit' });\n      kintoneSpaceElement.appendChild(button.render());\n      button.on('click', function(){\n        alert('This is my customization');\n      })\n    });\n  });   Attach index.js file into  kintone app setting", 
            "title": "Create a customization"
        }, 
        {
            "location": "/Getting-Started/QuickStart-React/", 
            "text": "QuickStart React\n\n\nRequirement\n\n\n\n\nNodejs\n\n\nGit\n\n\n\n\nCreate a customization\n\n\nStep\n 1: Run commands\n\n\n$ npm install -g create-react-app\n$ create-react-app my-customization\n$ cd my-customization\n$ npm install --only=dev cross-env babel-preset-stage-0 css-loader style-loader\n$ npm install --only=dev kintone-ui-components\n$ rm -f src/*\n\n\n\n\nStep\n 2: Add index.js file to src/ folder:\n\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport {Button} from 'kintone-ui-component';\nclass MyCustomization extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n        \nButton text='Submit' type='success' onClick={function() {alert('This is my customization');}}/\n\n    );\n  }\n}\n\n// Adding your customization into header space of kintone app\nkintone.events.on(\napp.record.index.show\n, function(ev) {\n    var kintoneSpaceElement = kintone.app.getHeaderSpaceElement();\n    ReactDOM.render(\nMyCustomization /\n, kintoneSpaceElement);\n});\n\n\n\n\nStep\n 3: Add webpack.config.js file to my-customization/ folder \n\n\nconst path = require('path');\nconst webpack = require('webpack');\nmodule.exports = (env = {}) =\n {\n    return {\n        entry: {\n            \nmy-customization.min\n: './src/index.js'\n        },\n        output: {\n            path: path.resolve(__dirname, 'dist'),\n            filename: '[name].js',\n        },\n        module: {\n            rules: [\n                {\n                    test: /\\.js$/,\n                    exclude: /(node_modules|bower_components)/,\n                    use: {\n                        loader: 'babel-loader',\n                        options: {\n                            presets: ['react','env'],\n                            plugins: [\ntransform-class-properties\n]\n                        }\n                    }\n                },\n                {\n                    test: /\\.css$/,\n                    use: [\n                      { loader: \nstyle-loader\n },\n                      { loader: \ncss-loader\n }\n                    ]\n                }\n            ]\n        },\n        watch: env.watch,\n        plugins: [\n            new webpack.optimize.UglifyJsPlugin({\n                include: /\\.min\\.js$/,\n                minimize: true\n            })\n        ]\n    }\n}\n\n\n\n\nStep\n 4: Add a script to buiding by webpack to package.json\n\n\nscripts\n: {\n    \nbuild-webpack\n: \ncross-env NODE_ENV=production webpack\n,\n    ...\n}\n\n\n\n\n\n\nRun command to build customization file\n\n\n\n\n$ npm run build-webpack\n\n\n\n\nresult:\n* ./dist/my-customization.min.js\n\n\n\n\n\n\nAttach my-customization.min.js into \nkintone app setting", 
            "title": "QuickStart React"
        }, 
        {
            "location": "/Getting-Started/QuickStart-React/#quickstart-react", 
            "text": "", 
            "title": "QuickStart React"
        }, 
        {
            "location": "/Getting-Started/QuickStart-React/#requirement", 
            "text": "Nodejs  Git", 
            "title": "Requirement"
        }, 
        {
            "location": "/Getting-Started/QuickStart-React/#create-a-customization", 
            "text": "Step  1: Run commands  $ npm install -g create-react-app\n$ create-react-app my-customization\n$ cd my-customization\n$ npm install --only=dev cross-env babel-preset-stage-0 css-loader style-loader\n$ npm install --only=dev kintone-ui-components\n$ rm -f src/*  Step  2: Add index.js file to src/ folder:  import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport {Button} from 'kintone-ui-component';\nclass MyCustomization extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n         Button text='Submit' type='success' onClick={function() {alert('This is my customization');}}/ \n    );\n  }\n}\n\n// Adding your customization into header space of kintone app\nkintone.events.on( app.record.index.show , function(ev) {\n    var kintoneSpaceElement = kintone.app.getHeaderSpaceElement();\n    ReactDOM.render( MyCustomization / , kintoneSpaceElement);\n});  Step  3: Add webpack.config.js file to my-customization/ folder   const path = require('path');\nconst webpack = require('webpack');\nmodule.exports = (env = {}) =  {\n    return {\n        entry: {\n             my-customization.min : './src/index.js'\n        },\n        output: {\n            path: path.resolve(__dirname, 'dist'),\n            filename: '[name].js',\n        },\n        module: {\n            rules: [\n                {\n                    test: /\\.js$/,\n                    exclude: /(node_modules|bower_components)/,\n                    use: {\n                        loader: 'babel-loader',\n                        options: {\n                            presets: ['react','env'],\n                            plugins: [ transform-class-properties ]\n                        }\n                    }\n                },\n                {\n                    test: /\\.css$/,\n                    use: [\n                      { loader:  style-loader  },\n                      { loader:  css-loader  }\n                    ]\n                }\n            ]\n        },\n        watch: env.watch,\n        plugins: [\n            new webpack.optimize.UglifyJsPlugin({\n                include: /\\.min\\.js$/,\n                minimize: true\n            })\n        ]\n    }\n}  Step  4: Add a script to buiding by webpack to package.json  scripts : {\n     build-webpack :  cross-env NODE_ENV=production webpack ,\n    ...\n}   Run command to build customization file   $ npm run build-webpack  result:\n* ./dist/my-customization.min.js   Attach my-customization.min.js into  kintone app setting", 
            "title": "Create a customization"
        }, 
        {
            "location": "/Reference/Alert/", 
            "text": "Alert\n\n\nOverview\n\n\n\n\n\n\n\n\n\n\nNumber\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nSuccess alert\n\n\n\n\n\n\n2\n\n\nError alert\n\n\n\n\n\n\n3\n\n\nDisplay text\n\n\n\n\n\n\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nNo\n\n\nThe object contains params of constructor.\n\n\n\n\n\n\noptions.text\n\n\nString\n\n\nYes\n\n\nThe content of alert.\n\n\n\n\n\n\noptions.type\n\n\nString\n\n\nNo\n\n\nThe type of alert: \n 'error' \n 'success' \n Default value is 'error'.\n\n\n\n\n\n\noptions.isDisabled\n\n\nBoolean\n\n\nNo\n\n\nThe alert will be disabled. \n Default value: 'false'\n\n\n\n\n\n\noptions.isVisible\n\n\nBoolean\n\n\nNo\n\n\nThe alert will be visible. \n Default value: 'true'\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Alert } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nAlert text='Network error' type='error'/\n\n        );\n    }\n}\n\n\n\n\nJavascript\n\n\nvar alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\n\n\n\n\n\n\nMethods\n\n\nrender()\n\n\nGet dom element of component.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nDom element\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Alert} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nAlert text='Network error' type='error'/\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(alert.render());\nalert .render();\n\n\n\n\n\n\nsetText(text)\n\n\nSet the content of alert.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nString\n\n\nYes\n\n\nThe content of alert. \n If text is undefined, null or true, The alert will be displayed blank.\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Alert } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nAlert text='Network error' type='error'/\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(alert.render());\nalert.setText('Network error');\n\n\n\n\n\n\nsetType(type)\n\n\nSet the type of alert.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nString\n\n\nNo\n\n\nThe type of alert. \n\"success\": success alert.\n\"error\": error alert \n Default value is \"error\".\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Alert } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nAlert text='Network error' type='error'/\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\n\nvar alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(alert.render());\nalert.setType('success');\n\n\n\n\n\n\non(eventName, callBack)\n\n\nThe callBack function will be execute after user click the alert.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neventName\n\n\nString\n\n\nYes\n\n\nName of event: \n'click'\n\n\n\n\n\n\ncallback\n\n\nfunction\n\n\nYes\n\n\ncallback\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Alert } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nAlert text='Network error' type='error' onClick={this.handleClick}/\n\n        );\n    }\n   handleClick(){\n        console.log('click');\n   }\n}\n\n\n\n\n\nJavascript\n\n\nvar alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(alert.render());\nalert.on('click', function(event) {\n    console.log('on click');\n});\n\n\n\n\n\n\nshow()\n\n\nDisplay the Alert.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Alert } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nAlert text='Network error' type='error' isVisible={true}/\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(alert.render());\nalert.show();\n\n\n\n\n\n\nhide()\n\n\nHide the Alert.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Alert } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nAlert text='Network error' type='error' isVisible={false}/\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(alert.render());\nalert.hide();\n\n\n\n\n\n\ndisable()\n\n\nDisable the Alert.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Alert } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nAlert text='Network error' type='error' isDisabled={true}/\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(alert.render());\nalert.disable();\n\n\n\n\n\n\nenable()\n\n\nEnable the Alert.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Alert } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nAlert text='Network error' type='error' isDisabled={false}/\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(alert.render());\nalert.enable();", 
            "title": "Alert"
        }, 
        {
            "location": "/Reference/Alert/#alert", 
            "text": "", 
            "title": "Alert"
        }, 
        {
            "location": "/Reference/Alert/#overview", 
            "text": "Number  Description      1  Success alert    2  Error alert    3  Display text", 
            "title": "Overview"
        }, 
        {
            "location": "/Reference/Alert/#constructor", 
            "text": "Parameter     Name  Type  Required  Description      options  Object  No  The object contains params of constructor.    options.text  String  Yes  The content of alert.    options.type  String  No  The type of alert:   'error'   'success'   Default value is 'error'.    options.isDisabled  Boolean  No  The alert will be disabled.   Default value: 'false'    options.isVisible  Boolean  No  The alert will be visible.   Default value: 'true'      Sample  React  import { Alert } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Alert text='Network error' type='error'/ \n        );\n    }\n}  Javascript  var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});", 
            "title": "Constructor"
        }, 
        {
            "location": "/Reference/Alert/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/Reference/Alert/#render", 
            "text": "Get dom element of component.  Parameter  None  Returns  Dom element   Sample  React  import { Alert} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Alert text='Network error' type='error'/ \n        );\n    }\n}  Javascript  var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(alert.render());\nalert .render();", 
            "title": "render()"
        }, 
        {
            "location": "/Reference/Alert/#settexttext", 
            "text": "Set the content of alert.  Parameter     Name  Type  Required  Description      text  String  Yes  The content of alert.   If text is undefined, null or true, The alert will be displayed blank.     Returns  None   Sample  React  import { Alert } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Alert text='Network error' type='error'/ \n        );\n    }\n}  Javascript  var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(alert.render());\nalert.setText('Network error');", 
            "title": "setText(text)"
        }, 
        {
            "location": "/Reference/Alert/#settypetype", 
            "text": "Set the type of alert.  Parameter     Name  Type  Required  Description      type  String  No  The type of alert.  \"success\": success alert. \"error\": error alert   Default value is \"error\".     Returns  None   Sample  React  import { Alert } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Alert text='Network error' type='error'/ \n        );\n    }\n}  Javascript  \nvar alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(alert.render());\nalert.setType('success');", 
            "title": "setType(type)"
        }, 
        {
            "location": "/Reference/Alert/#oneventname-callback", 
            "text": "The callBack function will be execute after user click the alert.  Parameter     Name  Type  Required  Description      eventName  String  Yes  Name of event:  'click'    callback  function  Yes  callback     Returns  None   Sample  React  import { Alert } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Alert text='Network error' type='error' onClick={this.handleClick}/ \n        );\n    }\n   handleClick(){\n        console.log('click');\n   }\n}  Javascript  var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(alert.render());\nalert.on('click', function(event) {\n    console.log('on click');\n});", 
            "title": "on(eventName, callBack)"
        }, 
        {
            "location": "/Reference/Alert/#show", 
            "text": "Display the Alert.  Parameter  None  Returns  None   Sample  React  import { Alert } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Alert text='Network error' type='error' isVisible={true}/ \n        );\n    }\n}  Javascript  var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(alert.render());\nalert.show();", 
            "title": "show()"
        }, 
        {
            "location": "/Reference/Alert/#hide", 
            "text": "Hide the Alert.  Parameter  None  Returns  None   Sample  React  import { Alert } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Alert text='Network error' type='error' isVisible={false}/ \n        );\n    }\n}  Javascript  var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(alert.render());\nalert.hide();", 
            "title": "hide()"
        }, 
        {
            "location": "/Reference/Alert/#disable", 
            "text": "Disable the Alert.  Parameter  None  Returns  None   Sample  React  import { Alert } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Alert text='Network error' type='error' isDisabled={true}/ \n        );\n    }\n}  Javascript  var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(alert.render());\nalert.disable();", 
            "title": "disable()"
        }, 
        {
            "location": "/Reference/Alert/#enable", 
            "text": "Enable the Alert.  Parameter  None  Returns  None   Sample  React  import { Alert } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Alert text='Network error' type='error' isDisabled={false}/ \n        );\n    }\n}  Javascript  var alert = new kintoneUIComponent.Alert({text: 'Network error', type: 'error'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(alert.render());\nalert.enable();", 
            "title": "enable()"
        }, 
        {
            "location": "/Reference/Button/", 
            "text": "Button\n\n\nOverview\n\n\n\n\n\n\n\n\n\n\nNumber\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nNormal button\n\n\n\n\n\n\n2\n\n\nSubmit button\n\n\n\n\n\n\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nNo\n\n\nThe object contains params of constructor.\n\n\n\n\n\n\noptions.text\n\n\nString\n\n\nNo\n\n\nText will be displayed in button.\n\n\n\n\n\n\noptions.type\n\n\nString\n\n\nNo\n\n\nStyle of the button: \n 'normal' \n 'submit' \n Default value: 'normal'\n\n\n\n\n\n\noptions.isDisabled\n\n\nBoolean\n\n\nNo\n\n\nThe button will be disabled. \n Default value: 'false'\n\n\n\n\n\n\noptions.isVisible\n\n\nBoolean\n\n\nNo\n\n\nThe button will be visible. \n  Default value: 'true'\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nButton text='Submit' type='submit' isDisabled={false} isVisible={true} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar button = new kintoneUIComponent.Button({\n    text: 'Submit',\n    type: 'submit'\n});\n\n\n\n\n\n\nMethods\n\n\nrender()\n\n\nGet dom element of component.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nDom element\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nButton text='Submit' type='submit' isDisabled={false} isVisible={true} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar button = new kintoneUIComponent.Button({text: 'button'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(button.render());\n\n\n\n\n\n\nsetText(text)\n\n\nSet displayed text in button.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nString\n\n\nYes\n\n\nDisplay text in button\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nButton text='Submit' type='normal' /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar button = new kintoneUIComponent.Button({text: 'button'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(button.render());\nbutton.setText('submit');\n\n\n\n\n\n\nsetType(type)\n\n\nSet the displayed type for button.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nString\n\n\nNo\n\n\nStyle of the button:\n 'normal' \n 'submit' \n Default value: 'normal'\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nButton text='Submit' type='normal' /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar button = new kintoneUIComponent.Button({text: 'button'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(button.render());\nbutton.setType('normal');\n\n\n\n\n\n\non(eventName, callback)\n\n\nRegister callback for click event\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neventName\n\n\nString\n\n\nYes\n\n\nName of event: \n'click'\n\n\n\n\n\n\ncallback\n\n\nfunction\n\n\nYes\n\n\ncallback\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nButton onClick={this.handleButtonClick} /\n\n        );\n    }\n\n    handleButtonClick(event) {\n        console.log('on click');\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar button = new kintoneUIComponent.Button({text: 'button'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(button.render());\nbutton.on('click', function(event) {\n    console.log('on click');\n});\n\n\n\n\n\n\nshow()\n\n\nDisplay button.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nButton text=\nbutton\n isVisible={true} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar button = new kintoneUIComponent.Button({text: 'button'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(button.render());\nbutton.show();\n\n\n\n\n\n\nhide()\n\n\nHide button.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nButton text=\nbutton\n isVisible={false} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar button = new kintoneUIComponent.Button({text: 'button'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(button.render());\nbutton.hide();\n\n\n\n\n\n\ndisable()\n\n\nDisable button.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nButton text=\nbutton\n isDisabled={true} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar button = new kintoneUIComponent.Button({text: 'button'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(button.render());\nbutton.disable();\n\n\n\n\n\n\nenable()\n\n\nEnable button.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nButton text=\nbutton\n isDisabled={false} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar button = new kintoneUIComponent.Button({text: 'button'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(button.render());\nbutton.enable();", 
            "title": "Button"
        }, 
        {
            "location": "/Reference/Button/#button", 
            "text": "", 
            "title": "Button"
        }, 
        {
            "location": "/Reference/Button/#overview", 
            "text": "Number  Description      1  Normal button    2  Submit button", 
            "title": "Overview"
        }, 
        {
            "location": "/Reference/Button/#constructor", 
            "text": "Parameter     Name  Type  Required  Description      options  Object  No  The object contains params of constructor.    options.text  String  No  Text will be displayed in button.    options.type  String  No  Style of the button:   'normal'   'submit'   Default value: 'normal'    options.isDisabled  Boolean  No  The button will be disabled.   Default value: 'false'    options.isVisible  Boolean  No  The button will be visible.    Default value: 'true'      Sample  React  import { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Button text='Submit' type='submit' isDisabled={false} isVisible={true} / \n        );\n    }\n}  Javascript  var button = new kintoneUIComponent.Button({\n    text: 'Submit',\n    type: 'submit'\n});", 
            "title": "Constructor"
        }, 
        {
            "location": "/Reference/Button/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/Reference/Button/#render", 
            "text": "Get dom element of component.  Parameter  None  Returns  Dom element   Sample  React  import { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Button text='Submit' type='submit' isDisabled={false} isVisible={true} / \n        );\n    }\n}  Javascript  var button = new kintoneUIComponent.Button({text: 'button'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(button.render());", 
            "title": "render()"
        }, 
        {
            "location": "/Reference/Button/#settexttext", 
            "text": "Set displayed text in button.  Parameter     Name  Type  Required  Description      text  String  Yes  Display text in button     Returns  None   Sample  React  import { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Button text='Submit' type='normal' / \n        );\n    }\n}  Javascript  var button = new kintoneUIComponent.Button({text: 'button'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(button.render());\nbutton.setText('submit');", 
            "title": "setText(text)"
        }, 
        {
            "location": "/Reference/Button/#settypetype", 
            "text": "Set the displayed type for button.  Parameter     Name  Type  Required  Description      type  String  No  Style of the button:  'normal'   'submit'   Default value: 'normal'     Returns  None   Sample  React  import { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Button text='Submit' type='normal' / \n        );\n    }\n}  Javascript  var button = new kintoneUIComponent.Button({text: 'button'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(button.render());\nbutton.setType('normal');", 
            "title": "setType(type)"
        }, 
        {
            "location": "/Reference/Button/#oneventname-callback", 
            "text": "Register callback for click event  Parameter     Name  Type  Required  Description      eventName  String  Yes  Name of event:  'click'    callback  function  Yes  callback     Returns  None   Sample  React  import { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Button onClick={this.handleButtonClick} / \n        );\n    }\n\n    handleButtonClick(event) {\n        console.log('on click');\n    }\n}  Javascript  var button = new kintoneUIComponent.Button({text: 'button'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(button.render());\nbutton.on('click', function(event) {\n    console.log('on click');\n});", 
            "title": "on(eventName, callback)"
        }, 
        {
            "location": "/Reference/Button/#show", 
            "text": "Display button.  Parameter  None  Returns  None   Sample  React  import { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Button text= button  isVisible={true} / \n        );\n    }\n}  Javascript  var button = new kintoneUIComponent.Button({text: 'button'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(button.render());\nbutton.show();", 
            "title": "show()"
        }, 
        {
            "location": "/Reference/Button/#hide", 
            "text": "Hide button.  Parameter  None  Returns  None   Sample  React  import { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Button text= button  isVisible={false} / \n        );\n    }\n}  Javascript  var button = new kintoneUIComponent.Button({text: 'button'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(button.render());\nbutton.hide();", 
            "title": "hide()"
        }, 
        {
            "location": "/Reference/Button/#disable", 
            "text": "Disable button.  Parameter  None  Returns  None   Sample  React  import { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Button text= button  isDisabled={true} / \n        );\n    }\n}  Javascript  var button = new kintoneUIComponent.Button({text: 'button'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(button.render());\nbutton.disable();", 
            "title": "disable()"
        }, 
        {
            "location": "/Reference/Button/#enable", 
            "text": "Enable button.  Parameter  None  Returns  None   Sample  React  import { Button } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Button text= button  isDisabled={false} / \n        );\n    }\n}  Javascript  var button = new kintoneUIComponent.Button({text: 'button'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(button.render());\nbutton.enable();", 
            "title": "enable()"
        }, 
        {
            "location": "/Reference/CheckBox/", 
            "text": "CheckBox\n\n\nOverview\n\n\n\n\n\n\n\n\n\n\nNumber\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nIcon when the item is selected\n\n\n\n\n\n\n2\n\n\nLabel of an item\n\n\n\n\n\n\n3\n\n\nNot selected item\n\n\n\n\n\n\n4\n\n\nDisabled item\n\n\n\n\n\n\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nNo\n\n\nThe object contains params of constructor.\n\n\n\n\n\n\noptions.items\n\n\nArray\nObject\n\n\nNo\n\n\nList of items which will be displayed on checkbox.\n\n\n\n\n\n\noptions.items[].value\n\n\nString\n\n\nYes\n\n\nString value of item \n If the value is duplicate, the error message will be displayed\n\n\n\n\n\n\noptions.items[].label\n\n\nString\n\n\nNo\n\n\nString label of item\n\n\n\n\n\n\noptions.items[].isDisabled\n\n\nBoolean\n\n\nNo\n\n\nIndicate item will be disabled when display. Default value is false.\n\n\n\n\n\n\noptions.value\n\n\nArray\n\n\nNo\n\n\nList of checked item.\n\n\n\n\n\n\noptions.isDisabled\n\n\nBoolean\n\n\nNo\n\n\nThe checkBox will be disabled. \n Default value: 'false'\n\n\n\n\n\n\noptions.isVisible\n\n\nBoolean\n\n\nNo\n\n\nThe checkBox will be visible. \n Default value: 'true'\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items, value: ['Orange']};\n\n        return (\n            \nCheckBox items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n        );\n    }\n}\n\n\n\n\nJavascript\n\n\nvar checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\n\n\n\n\n\nMethods\n\n\nrender()\n\n\nGet dom element of component.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nDom element\n\n\n\n\nSample\n\n\nReact\n\n\nimport { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items, value: ['Orange']};\n\n        return (\n            \nCheckBox items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n        );\n    }\n}\n\n\n\n\nJavascript\n\n\nvar checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\n\n\n\n\n\n\naddItem(item)\n\n\nAdd an item to the end of checkbox list.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nitem\n\n\nString\n\n\nYes\n\n\nThe item will be added to multile choices list.\n\n\n\n\n\n\nitem.value\n\n\nString\n\n\nYes\n\n\nThe value of an item.\n\n\n\n\n\n\nitem.label\n\n\nString\n\n\nNo\n\n\nDisplay string.\n\n\n\n\n\n\nitem.isDisabled\n\n\nBoolean\n\n\nNo\n\n\nIndicate item will be disabled when display. \n Default value: 'false'\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: []\n        }\n    }\n\n    render() {\n        return (\n        \ndiv\n\n          \nCheckBox items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nAdd Item\n/button\n\n        \n/div\n\n      );\n    }\n\n    handleClick = () =\n {\n      const item = {\n        label: 'Lemon',\n        value: 'Lemon',\n        isDisabled: false\n      };\n      this.setState(prevState =\n ({\n        items: prevState.items ? prevState.items.concat([item]) : [item]\n      }))\n    }\n}\n\n\n\n\nJavascript\n\n\nvar checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.addItem({\n    label: 'Grape',\n    value: 'grape',\n    isDisabled: false\n});\n\n\n\n\n\n\ngetItem(index)\n\n\nGet the value of specific position in checkbox list.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nindex\n\n\nInteger\n\n\nYes\n\n\nThe position of retrieved item.\n\n\n\n\n\n\n\n\nReturns\n\n\nThe item at given position.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nitem\n\n\nString\n\n\nthe item of the checkbox\n\n\n\n\n\n\nitem.value\n\n\nString\n\n\nThe value of an item.\n\n\n\n\n\n\nitem.label\n\n\nString\n\n\nDisplay string.\n\n\n\n\n\n\nitem.isDisabled\n\n\nBoolean\n\n\nIndicate item will be disabled when display.\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: []\n        }\n    }\n\n    render() {\n        return (\n        \ndiv\n\n          \nCheckBox items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nGet Item\n/button\n\n        \n/div\n\n      );\n    }\n\n    handleClick = () =\n {\n        console.log(this.state.items[0])\n    }\n}\n\n\n\n\nJavascript\n\n\nvar checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\nvar firstItem = checkbox.getItem(0);\nconsole.log(firstItem);\n\n\n\n\n\n\nremoveItem(index)\n\n\nRemove the specific item from checkbox list.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nindex\n\n\nInteger\n\n\nYes\n\n\nThe position of retrieved item.\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: []\n        }\n    }\n\n    render() {\n        return (\n        \ndiv\n\n          \nCheckBox items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nRemove Item\n/button\n\n        \n/div\n\n      );\n    }\n\n    handleClick = () =\n {\n      this.setState(prevState =\n {\n        if (prevState.items) {\n            return prevState.items.splice(0, 1);\n        }\n        return prevState;\n      });\n    }\n}\n\n\n\n\nJavascript\n\n\nvar checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.removeItem(0);\n\n\n\n\n\n\ngetItems()\n\n\nGet all items from the checkbox.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nThe list contains all items of the dropdown.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nitems\n\n\nArray\nObject\n\n\nList items of the checkbox\n\n\n\n\n\n\nitems[].value\n\n\nString\n\n\nThe value of an item.\n\n\n\n\n\n\nitems[].label\n\n\nString\n\n\nDisplay string.\n\n\n\n\n\n\nitems[].isDisabled\n\n\nBoolean\n\n\nIndicate item will be disabled when display.\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n        \ndiv\n\n          \nCheckBox items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nGet Items\n/button\n\n        \n/div\n\n      );\n    }\n\n    handleClick = () =\n {\n        this.state.items.forEach(item =\n {\n            console.log(item);\n        });\n    }\n}\n\n\n\n\nJavascript\n\n\nvar checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\nvar items = checkbox.getItems();\nitems.forEach(function(item) {\n    console.log(item.value + ':' + item.isDisabled);\n});\n\n\n\n\n\n\ngetValue()\n\n\nGet the checked values of the checkbox.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nList of checked items.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nList\nString\n\n\nThe value of selected items.\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n        \ndiv\n\n          \nCheckBox items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nGet Values\n/button\n\n        \n/div\n\n      );\n    }\n\n    handleClick = () =\n {\n       console.log(this.state.value);\n    }\n}\n\n\n\n\nJavascript\n\n\nvar checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\nvar value = checkbox.getValue();\nvalue.forEach(function(item) {\n    console.log(item);\n});\n\n\n\n\n\n\nsetValue(value)\n\n\nSet the checked value of checkbox.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nArray\nString\n\n\nYes\n\n\nThe array contains checked value in list.\n If the 'value[]' is nonexistent value, the error will be displayed\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items, value: []};\n    }\n\n    render() {\n        return (\n        \ndiv\n\n          \nCheckBox items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nSet Value\n/button\n\n        \n/div\n\n      );\n    }\n\n    handleClick = () =\n {\n        this.setState({\n            value: this.state.value.concat(['Lemon'])\n        });\n    }\n}\n\n\n\n\nJavascript\n\n\nvar checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.setValue(['Lemon']);\n\n\n\n\n\n\ndisableItem(value)\n\n\nSet the disabled item of checkbox.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nArray\n\n\nYes\n\n\nThe array contains checked value in list.\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n        \ndiv\n\n          \nCheckBox items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nDisable item\n/button\n\n        \n/div\n\n      );\n    }\n\n    handleClick = () =\n {\n        const items = [...this.state.items];\n\n        items[0].isDisabled = true;\n        this.setState({ items: items });\n    }\n}\n\n\n\n\nJavascript\n\n\nvar checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.disableItem('Orange');\n\n\n\n\n\n\nenableItem(value)\n\n\nSet the enable item of checkbox.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nArray\n\n\nYes\n\n\nThe array contains checked value in list.\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n        \ndiv\n\n          \nCheckBox items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nClick\n/button\n\n        \n/div\n\n        );\n      }\n\n    handleClick = () =\n {\n        const items = [...this.state.items];\n\n        items[1].isDisabled = false;\n        this.setState({ items: items });\n    }\n}\n\n\n\n\nJavascript\n\n\nvar checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.enableItem('Banana');\n\n\n\n\n\n\non(eventName, callBack)\n\n\nRegister callback for change event\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neventName\n\n\nString\n\n\nYes\n\n\nName of event: \n'change'\n\n\n\n\n\n\ncallback\n\n\nfunction\n\n\nYes\n\n\ncallback\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n            \nCheckBox value={this.state.value} items={this.state.items} onChange={this.handleChange} /\n\n        );\n    }\n\n    handleChange= () =\n {\n        const items = [...this.state.items];\n\n        items[1].isDisabled = false;\n        this.setState({ items: items });\n    }\n}\n\n\n\n\nJavascript\n\n\nvar checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.on('change', function(value) {\n    console.log('on change');\n});\n\n\n\n\n\n\nshow()\n\n\nDisplay the checkbox.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n            \nCheckBox value={this.state.value} isVisible={true} items={this.state.items} onChange={(value) =\n {this.setState({value})}}/\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.show();\n\n\n\n\n\n\nhide()\n\n\nHide the checkbox.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n            \nCheckBox value={this.state.value} isVisible={false} items={this.state.items} onChange={(value) =\n {this.setState({value})}}/\n\n        );\n    }\n}\n\n\n\n\nJavascript\n\n\nvar checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.hide();\n\n\n\n\n\n\ndisable()\n\n\nDisabled the checkbox.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n            \nCheckBox isDisabled={true} items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}}/\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.disable();\n\n\n\n\n\n\nenable()\n\n\nEnabled the checkbox.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\n\nimport { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n            \nCheckBox isDisabled={false} items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}}/\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.enable();", 
            "title": "CheckBox"
        }, 
        {
            "location": "/Reference/CheckBox/#checkbox", 
            "text": "", 
            "title": "CheckBox"
        }, 
        {
            "location": "/Reference/CheckBox/#overview", 
            "text": "Number  Description      1  Icon when the item is selected    2  Label of an item    3  Not selected item    4  Disabled item", 
            "title": "Overview"
        }, 
        {
            "location": "/Reference/CheckBox/#constructor", 
            "text": "Parameter     Name  Type  Required  Description      options  Object  No  The object contains params of constructor.    options.items  Array Object  No  List of items which will be displayed on checkbox.    options.items[].value  String  Yes  String value of item   If the value is duplicate, the error message will be displayed    options.items[].label  String  No  String label of item    options.items[].isDisabled  Boolean  No  Indicate item will be disabled when display. Default value is false.    options.value  Array  No  List of checked item.    options.isDisabled  Boolean  No  The checkBox will be disabled.   Default value: 'false'    options.isVisible  Boolean  No  The checkBox will be visible.   Default value: 'true'      Sample  React  import { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items, value: ['Orange']};\n\n        return (\n             CheckBox items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n        );\n    }\n}  Javascript  var checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});", 
            "title": "Constructor"
        }, 
        {
            "location": "/Reference/CheckBox/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/Reference/CheckBox/#render", 
            "text": "Get dom element of component.  Parameter  None  Returns  Dom element   Sample  React  import { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items, value: ['Orange']};\n\n        return (\n             CheckBox items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n        );\n    }\n}  Javascript  var checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());", 
            "title": "render()"
        }, 
        {
            "location": "/Reference/CheckBox/#additemitem", 
            "text": "Add an item to the end of checkbox list.  Parameter     Name  Type  Required  Description      item  String  Yes  The item will be added to multile choices list.    item.value  String  Yes  The value of an item.    item.label  String  No  Display string.    item.isDisabled  Boolean  No  Indicate item will be disabled when display.   Default value: 'false'     Returns  None   Sample  React  import { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: []\n        }\n    }\n\n    render() {\n        return (\n         div \n           CheckBox items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Add Item /button \n         /div \n      );\n    }\n\n    handleClick = () =  {\n      const item = {\n        label: 'Lemon',\n        value: 'Lemon',\n        isDisabled: false\n      };\n      this.setState(prevState =  ({\n        items: prevState.items ? prevState.items.concat([item]) : [item]\n      }))\n    }\n}  Javascript  var checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.addItem({\n    label: 'Grape',\n    value: 'grape',\n    isDisabled: false\n});", 
            "title": "addItem(item)"
        }, 
        {
            "location": "/Reference/CheckBox/#getitemindex", 
            "text": "Get the value of specific position in checkbox list.  Parameter     Name  Type  Required  Description      index  Integer  Yes  The position of retrieved item.     Returns  The item at given position.     Name  Type  Description      item  String  the item of the checkbox    item.value  String  The value of an item.    item.label  String  Display string.    item.isDisabled  Boolean  Indicate item will be disabled when display.      Sample  React  import { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: []\n        }\n    }\n\n    render() {\n        return (\n         div \n           CheckBox items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Get Item /button \n         /div \n      );\n    }\n\n    handleClick = () =  {\n        console.log(this.state.items[0])\n    }\n}  Javascript  var checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\nvar firstItem = checkbox.getItem(0);\nconsole.log(firstItem);", 
            "title": "getItem(index)"
        }, 
        {
            "location": "/Reference/CheckBox/#removeitemindex", 
            "text": "Remove the specific item from checkbox list.  Parameter     Name  Type  Required  Description      index  Integer  Yes  The position of retrieved item.     Returns  None   Sample  React  import { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: []\n        }\n    }\n\n    render() {\n        return (\n         div \n           CheckBox items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Remove Item /button \n         /div \n      );\n    }\n\n    handleClick = () =  {\n      this.setState(prevState =  {\n        if (prevState.items) {\n            return prevState.items.splice(0, 1);\n        }\n        return prevState;\n      });\n    }\n}  Javascript  var checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.removeItem(0);", 
            "title": "removeItem(index)"
        }, 
        {
            "location": "/Reference/CheckBox/#getitems", 
            "text": "Get all items from the checkbox.  Parameter  None  Returns  The list contains all items of the dropdown.     Name  Type  Description      items  Array Object  List items of the checkbox    items[].value  String  The value of an item.    items[].label  String  Display string.    items[].isDisabled  Boolean  Indicate item will be disabled when display.      Sample  React  import { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n         div \n           CheckBox items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Get Items /button \n         /div \n      );\n    }\n\n    handleClick = () =  {\n        this.state.items.forEach(item =  {\n            console.log(item);\n        });\n    }\n}  Javascript  var checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\nvar items = checkbox.getItems();\nitems.forEach(function(item) {\n    console.log(item.value + ':' + item.isDisabled);\n});", 
            "title": "getItems()"
        }, 
        {
            "location": "/Reference/CheckBox/#getvalue", 
            "text": "Get the checked values of the checkbox.  Parameter  None  Returns  List of checked items.     Name  Type  Description      value  List String  The value of selected items.      Sample  React  import { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n         div \n           CheckBox items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Get Values /button \n         /div \n      );\n    }\n\n    handleClick = () =  {\n       console.log(this.state.value);\n    }\n}  Javascript  var checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\nvar value = checkbox.getValue();\nvalue.forEach(function(item) {\n    console.log(item);\n});", 
            "title": "getValue()"
        }, 
        {
            "location": "/Reference/CheckBox/#setvaluevalue", 
            "text": "Set the checked value of checkbox.  Parameter     Name  Type  Required  Description      value  Array String  Yes  The array contains checked value in list.  If the 'value[]' is nonexistent value, the error will be displayed     Returns  None   Sample  React  import { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items, value: []};\n    }\n\n    render() {\n        return (\n         div \n           CheckBox items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Set Value /button \n         /div \n      );\n    }\n\n    handleClick = () =  {\n        this.setState({\n            value: this.state.value.concat(['Lemon'])\n        });\n    }\n}  Javascript  var checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.setValue(['Lemon']);", 
            "title": "setValue(value)"
        }, 
        {
            "location": "/Reference/CheckBox/#disableitemvalue", 
            "text": "Set the disabled item of checkbox.  Parameter     Name  Type  Required  Description      value  Array  Yes  The array contains checked value in list.     Returns  None   Sample  React  import { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n         div \n           CheckBox items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Disable item /button \n         /div \n      );\n    }\n\n    handleClick = () =  {\n        const items = [...this.state.items];\n\n        items[0].isDisabled = true;\n        this.setState({ items: items });\n    }\n}  Javascript  var checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.disableItem('Orange');", 
            "title": "disableItem(value)"
        }, 
        {
            "location": "/Reference/CheckBox/#enableitemvalue", 
            "text": "Set the enable item of checkbox.  Parameter     Name  Type  Required  Description      value  Array  Yes  The array contains checked value in list.     Returns  None   Sample  React  import { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n         div \n           CheckBox items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Click /button \n         /div \n        );\n      }\n\n    handleClick = () =  {\n        const items = [...this.state.items];\n\n        items[1].isDisabled = false;\n        this.setState({ items: items });\n    }\n}  Javascript  var checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.enableItem('Banana');", 
            "title": "enableItem(value)"
        }, 
        {
            "location": "/Reference/CheckBox/#oneventname-callback", 
            "text": "Register callback for change event  Parameter     Name  Type  Required  Description      eventName  String  Yes  Name of event:  'change'    callback  function  Yes  callback     Returns  None   Sample  React  import { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n             CheckBox value={this.state.value} items={this.state.items} onChange={this.handleChange} / \n        );\n    }\n\n    handleChange= () =  {\n        const items = [...this.state.items];\n\n        items[1].isDisabled = false;\n        this.setState({ items: items });\n    }\n}  Javascript  var checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.on('change', function(value) {\n    console.log('on change');\n});", 
            "title": "on(eventName, callBack)"
        }, 
        {
            "location": "/Reference/CheckBox/#show", 
            "text": "Display the checkbox.  Parameter  None  Returns  None   Sample  React  import { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n             CheckBox value={this.state.value} isVisible={true} items={this.state.items} onChange={(value) =  {this.setState({value})}}/ \n        );\n    }\n}  Javascript  var checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.show();", 
            "title": "show()"
        }, 
        {
            "location": "/Reference/CheckBox/#hide", 
            "text": "Hide the checkbox.  Parameter  None  Returns  None   Sample  React  import { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n             CheckBox value={this.state.value} isVisible={false} items={this.state.items} onChange={(value) =  {this.setState({value})}}/ \n        );\n    }\n}  Javascript  var checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.hide();", 
            "title": "hide()"
        }, 
        {
            "location": "/Reference/CheckBox/#disable", 
            "text": "Disabled the checkbox.  Parameter  None  Returns  None   Sample  React  import { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n             CheckBox isDisabled={true} items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}}/ \n        );\n    }\n}  Javascript  var checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.disable();", 
            "title": "disable()"
        }, 
        {
            "location": "/Reference/CheckBox/#enable", 
            "text": "Enabled the checkbox.  Parameter  None  Returns  None   Sample  React  \nimport { CheckBox } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n             CheckBox isDisabled={false} items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}}/ \n        );\n    }\n}  Javascript  var checkbox = new kintoneUIComponent.CheckBox ({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName('BODY')[0];\nbody.appendChild(checkbox.render());\n\ncheckbox.enable();", 
            "title": "enable()"
        }, 
        {
            "location": "/Reference/Dropdown/", 
            "text": "Dropdown\n\n\nOverview\n\n\n\n\n\n\n\n\n\n\nNumber\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nMain area\n\n\n\n\n\n\n2\n\n\nContent area\n\n\n\n\n\n\n3\n\n\nSelected item\n\n\n\n\n\n\n4\n\n\nNot selected item\n\n\n\n\n\n\n5\n\n\nDisabled item\n\n\n\n\n\n\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nNo\n\n\nThe object contains params of constructor.\n\n\n\n\n\n\noptions.items\n\n\nArray\nObject\n\n\nNo\n\n\nList of items will be displayed on dropdown.\n\n\n\n\n\n\noptions.items[].value\n\n\nString\n\n\nYes\n\n\nThe value of an item.\nIf the value is duplicate, the error will be displayed\n\n\n\n\n\n\noptions.items[].label\n\n\nString\n\n\nNo\n\n\nList of items will be displayed on dropdown.\n\n\n\n\n\n\noptions.items[].isDisabled\n\n\nBoolean\n\n\nNo\n\n\nIndicate item will be disabled when display. Default value is false.\n\n\n\n\n\n\noptions.value\n\n\nString\n\n\nNo\n\n\nDefault selected value. \n If the 'options.value' is nonexistent value, the error will be displayed\n\n\n\n\n\n\noptions.isDisabled\n\n\nBoolean\n\n\nNo\n\n\nThe dropdown will be disabled. \n Default value: 'false'\n\n\n\n\n\n\noptions.isVisible\n\n\nBoolean\n\n\nNo\n\n\nThe dropdown will be visible. \n Default value: 'true'\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items, value: 'Orange'};\n\n        return (\n            \nDropdown items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n        );\n    }\n}\n\n\n\n\nJavascript\n\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\n\n\n\n\n\nMethods\n\n\nrender()\n\n\nGet dom element of component.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nDom element\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items, value: 'Orange'};\n\n        return (\n            \nDropdown items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n        );\n    }\n}\n\n\n\n\nJavascript\n\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\n    body.appendChild(dropdown.render());\n\n\n\n\n\n\n\naddItem(item)\n\n\nAdd an item to dropdown list.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nitem\n\n\nObject\n\n\nYes\n\n\nThe item will be added to dropdown list.\n\n\n\n\n\n\nitem.value\n\n\nString\n\n\nYes\n\n\nThe value of an item.\n\n\n\n\n\n\nitem.label\n\n\nString\n\n\nYes\n\n\nDisplay string.\n\n\n\n\n\n\nitem.isDisabled\n\n\nBoolean\n\n\nYes\n\n\nIndicate item will be disabled when display. \nDefault value: 'false'\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: [],\n            value: undefined\n        }\n    }\n\n    render() {\n        return (\n         \ndiv\n\n          \nDropdown items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nAdd Item\n/button\n\n         \n/div\n\n        );\n    }\n\n    handleClick= () =\n {\n      const item = {\n        label: 'Lemon',\n        value: 'Lemon',\n        isDisabled: false\n      };\n      this.setState(prevState =\n ({\n        items: prevState.items ? prevState.items.concat([item]) : [item]\n      }))\n    };\n}\n\n\n\n\n\nJavascript\n\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\n    body.appendChild(dropdown.render());\n\ndropdown.addItem({label: 'Lemon', value: 'Lemon', isDisabled: true});\n\n\n\n\n\n\nremoveItem(index)\n\n\nRemove an item at specific position in dropdown's list.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nindex\n\n\nInteger\n\n\nYes\n\n\nThe index of remove item.\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: []\n        }\n    }\n\n    render() {\n        return (\n         \ndiv\n\n          \nDropdown items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nRemove Item\n/button\n\n         \n/div\n\n        );\n    }\n\n    handleClick= () =\n {\n      this.setState(prevState =\n {\n        if (prevState.items) {\n            return prevState.items.splice(0, 1);\n        }\n        return prevState;\n      });\n    };\n}\n\n\n\n\n\nJavascript\n\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\n    body.appendChild(dropdown.render());\nvar firstItem = dropdown.getItems()[0];\ndropdown.removeItem(0);\nconsole.log(firstItem);\n\n\n\n\n\n\ngetItems()\n\n\nGet all items of the dropdown.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nThe list contains all items of dropdown.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nitems\n\n\nList\nObject\n\n\nList of items objects in dropdown.\n\n\n\n\n\n\nitems[].label\n\n\nString\n\n\nDisplay string.\n\n\n\n\n\n\nitems[].value\n\n\nString\n\n\nThe value of an item.\n\n\n\n\n\n\nitems[].isDisabled\n\n\nBoolean\n\n\nIndicate item was disabled.\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n         \ndiv\n\n          \nDropdown items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nGet Items\n/button\n\n         \n/div\n\n        );\n    }\n\n    handleClick = () =\n {\n        this.state.items.forEach(item =\n {\n            console.log(item);\n        });\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\n    body.appendChild(dropdown.render());\n\nvar list = dropdown.getItems();\nlist.forEach(function(item) {\n    console.log(item);\n});\n\n\n\n\n\n\ngetValue()\n\n\nGet value of the selected item\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nThe value of the selected item\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n         \ndiv\n\n          \nDropdown items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nGet Value\n/button\n\n         \n/div\n\n        );\n    }\n\n    handleClick = () =\n {\n        console.log(this.state.value);\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\n    body.appendChild(dropdown.render());\n\nvar selectedItem = dropdown.getValue();\nconsole.log(selectedItem);\n\n\n\n\n\n\nsetValue(value)\n\n\nSet the selected value for dropdown.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nYes\n\n\nThe value of an Item in dropdown. \n If the 'value' is nonexistent value, the error will be displayed\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n         \ndiv\n\n          \nDropdown items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nSet Value\n/button\n\n         \n/div\n\n        );\n    }\n\n    handleClick = () =\n {\n        this.setState({value: 'Orange'});\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\n    body.appendChild(dropdown.render());\n\ndropdown.setValue('Orange');\n\n\n\n\n\n\ndisableItem(value)\n\n\nSet the disabled item for dropdown.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nYes\n\n\nThe value of an Item in dropdown.\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n   render() {\n        return (\n         \ndiv\n\n          \nDropdown items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nDisabled Item\n/button\n\n         \n/div\n\n        );\n    }\n\n    handleClick = () =\n {\n        const items = [...this.state.items];\n        items[0].isDisabled = true;\n\n        this.setState({ items: items });\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\n    body.appendChild(dropdown.render());\n\ndropdown.disableItem('Orange');\n\n\n\n\n\n\nenableItem(value)\n\n\nSet the enabled item for dropdown.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nYes\n\n\nThe value of an Item in dropdown.\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n   render() {\n        return (\n         \ndiv\n\n          \nDropdown items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nEnabled Item\n/button\n\n         \n/div\n\n        );\n    }\n\n    handleClick = () =\n {\n        const items = [...this.state.items];\n        items[1].isDisabled = false;\n\n        this.setState({ items: items });\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\n    body.appendChild(dropdown.render());\n\ndropdown.enableItem('Banana');\n\n\n\n\n\n\non(eventName, callBack)\n\n\nRegister callback for change event\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neventName\n\n\nString\n\n\nYes\n\n\nName of event: \n'change'\n\n\n\n\n\n\ncallback\n\n\nfunction\n\n\nYes\n\n\ncallback\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n   render() {\n        return (\n            \nDropdown items={this.state.items}  value={this.state.value} onChange={this.handleChange } /\n\n        );\n    }\n        handleChange = (value) =\n {\n            this.setState({value});\n            console.log('value: ' + value);\n        }\n    }\n\n\n\n\n\nJavascript\n\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\n    body.appendChild(dropdown.render());\n\ndropdown.on('change', function(value) {\n    console.log('on change');\n});\n\n\n\n\n\n\nshow()\n\n\nDisplay the dropdown.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n   render() {\n        return (\n            \nDropdown items={this.state.items}  value={this.state.value} onChange={this.handleChange}  isVisible={true} /\n\n        );\n    }\n\n    handleChange = (value) =\n {\n        this.setState({value});\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\n    body.appendChild(dropdown.render());\n\ndropdown.show();\n\n\n\n\n\n\nhide()\n\n\nHide the dropdown.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n   render() {\n        return (\n            \nDropdown items={this.state.items}  value={this.state.value} onChange={this.handleChange}  isVisible={false} /\n\n        );\n\n    }\n\n    handleChange = (value) =\n {\n            this.setState({value});\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\n    body.appendChild(dropdown.render());\n\ndropdown.hide();\n\n\n\n\n\n\ndisable()\n\n\nDisabled the dropdown.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n   render() {\n        return (\n            \nDropdown items={this.state.items}  value={this.state.value} onChange={this.handleChange}  isDisabled={true} /\n\n        ); \n    }\n    handleChange = (value) =\n {\n         this.setState({value});\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\n    body.appendChild(dropdown.render());\n\ndropdown.disable();\n\n\n\n\n\n\nenable()\n\n\nEnabled the dropdown.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n   render() {\n        return (\n            \nDropdown items={this.state.items}  value={this.state.value} onChange={this.handleChange}  isDisabled={false} /\n\n        );\n\n    }\n\n    handleChange = (value) =\n {\n        this.setState({value});\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\n    body.appendChild(dropdown.render());\n\ndropdown.enable();", 
            "title": "Dropdown"
        }, 
        {
            "location": "/Reference/Dropdown/#dropdown", 
            "text": "", 
            "title": "Dropdown"
        }, 
        {
            "location": "/Reference/Dropdown/#overview", 
            "text": "Number  Description      1  Main area    2  Content area    3  Selected item    4  Not selected item    5  Disabled item", 
            "title": "Overview"
        }, 
        {
            "location": "/Reference/Dropdown/#constructor", 
            "text": "Parameter     Name  Type  Required  Description      options  Object  No  The object contains params of constructor.    options.items  Array Object  No  List of items will be displayed on dropdown.    options.items[].value  String  Yes  The value of an item. If the value is duplicate, the error will be displayed    options.items[].label  String  No  List of items will be displayed on dropdown.    options.items[].isDisabled  Boolean  No  Indicate item will be disabled when display. Default value is false.    options.value  String  No  Default selected value.   If the 'options.value' is nonexistent value, the error will be displayed    options.isDisabled  Boolean  No  The dropdown will be disabled.   Default value: 'false'    options.isVisible  Boolean  No  The dropdown will be visible.   Default value: 'true'      Sample  React  import { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items, value: 'Orange'};\n\n        return (\n             Dropdown items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n        );\n    }\n}  Javascript  var dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});", 
            "title": "Constructor"
        }, 
        {
            "location": "/Reference/Dropdown/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/Reference/Dropdown/#render", 
            "text": "Get dom element of component.  Parameter  None  Returns  Dom element   Sample  React  import { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items, value: 'Orange'};\n\n        return (\n             Dropdown items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n        );\n    }\n}  Javascript  var dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\n    body.appendChild(dropdown.render());", 
            "title": "render()"
        }, 
        {
            "location": "/Reference/Dropdown/#additemitem", 
            "text": "Add an item to dropdown list.  Parameter     Name  Type  Required  Description      item  Object  Yes  The item will be added to dropdown list.    item.value  String  Yes  The value of an item.    item.label  String  Yes  Display string.    item.isDisabled  Boolean  Yes  Indicate item will be disabled when display.  Default value: 'false'     Returns  None   Sample  React  import { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: [],\n            value: undefined\n        }\n    }\n\n    render() {\n        return (\n          div \n           Dropdown items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Add Item /button \n          /div \n        );\n    }\n\n    handleClick= () =  {\n      const item = {\n        label: 'Lemon',\n        value: 'Lemon',\n        isDisabled: false\n      };\n      this.setState(prevState =  ({\n        items: prevState.items ? prevState.items.concat([item]) : [item]\n      }))\n    };\n}  Javascript  var dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\n    body.appendChild(dropdown.render());\n\ndropdown.addItem({label: 'Lemon', value: 'Lemon', isDisabled: true});", 
            "title": "addItem(item)"
        }, 
        {
            "location": "/Reference/Dropdown/#removeitemindex", 
            "text": "Remove an item at specific position in dropdown's list.  Parameter     Name  Type  Required  Description      index  Integer  Yes  The index of remove item.     Returns  None   Sample  React  import { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: []\n        }\n    }\n\n    render() {\n        return (\n          div \n           Dropdown items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Remove Item /button \n          /div \n        );\n    }\n\n    handleClick= () =  {\n      this.setState(prevState =  {\n        if (prevState.items) {\n            return prevState.items.splice(0, 1);\n        }\n        return prevState;\n      });\n    };\n}  Javascript  var dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\n    body.appendChild(dropdown.render());\nvar firstItem = dropdown.getItems()[0];\ndropdown.removeItem(0);\nconsole.log(firstItem);", 
            "title": "removeItem(index)"
        }, 
        {
            "location": "/Reference/Dropdown/#getitems", 
            "text": "Get all items of the dropdown.  Parameter  None  Returns  The list contains all items of dropdown.     Name  Type  Description      items  List Object  List of items objects in dropdown.    items[].label  String  Display string.    items[].value  String  The value of an item.    items[].isDisabled  Boolean  Indicate item was disabled.      Sample  React  import { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n          div \n           Dropdown items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Get Items /button \n          /div \n        );\n    }\n\n    handleClick = () =  {\n        this.state.items.forEach(item =  {\n            console.log(item);\n        });\n    }\n}  Javascript  var dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\n    body.appendChild(dropdown.render());\n\nvar list = dropdown.getItems();\nlist.forEach(function(item) {\n    console.log(item);\n});", 
            "title": "getItems()"
        }, 
        {
            "location": "/Reference/Dropdown/#getvalue", 
            "text": "Get value of the selected item  Parameter  None  Returns     Name  Type  Description      value  String  The value of the selected item      Sample  React  import { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n          div \n           Dropdown items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Get Value /button \n          /div \n        );\n    }\n\n    handleClick = () =  {\n        console.log(this.state.value);\n    }\n}  Javascript  var dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\n    body.appendChild(dropdown.render());\n\nvar selectedItem = dropdown.getValue();\nconsole.log(selectedItem);", 
            "title": "getValue()"
        }, 
        {
            "location": "/Reference/Dropdown/#setvaluevalue", 
            "text": "Set the selected value for dropdown.  Parameter     Name  Type  Required  Description      value  String  Yes  The value of an Item in dropdown.   If the 'value' is nonexistent value, the error will be displayed     Returns  None   Sample  React  import { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n          div \n           Dropdown items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Set Value /button \n          /div \n        );\n    }\n\n    handleClick = () =  {\n        this.setState({value: 'Orange'});\n    }\n}  Javascript  var dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\n    body.appendChild(dropdown.render());\n\ndropdown.setValue('Orange');", 
            "title": "setValue(value)"
        }, 
        {
            "location": "/Reference/Dropdown/#disableitemvalue", 
            "text": "Set the disabled item for dropdown.  Parameter     Name  Type  Required  Description      value  String  Yes  The value of an Item in dropdown.     Returns  None   Sample  React  import { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n   render() {\n        return (\n          div \n           Dropdown items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Disabled Item /button \n          /div \n        );\n    }\n\n    handleClick = () =  {\n        const items = [...this.state.items];\n        items[0].isDisabled = true;\n\n        this.setState({ items: items });\n    }\n}  Javascript  var dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\n    body.appendChild(dropdown.render());\n\ndropdown.disableItem('Orange');", 
            "title": "disableItem(value)"
        }, 
        {
            "location": "/Reference/Dropdown/#enableitemvalue", 
            "text": "Set the enabled item for dropdown.  Parameter     Name  Type  Required  Description      value  String  Yes  The value of an Item in dropdown.     Returns  None   Sample  React  import { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n   render() {\n        return (\n          div \n           Dropdown items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Enabled Item /button \n          /div \n        );\n    }\n\n    handleClick = () =  {\n        const items = [...this.state.items];\n        items[1].isDisabled = false;\n\n        this.setState({ items: items });\n    }\n}  Javascript  var dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\n    body.appendChild(dropdown.render());\n\ndropdown.enableItem('Banana');", 
            "title": "enableItem(value)"
        }, 
        {
            "location": "/Reference/Dropdown/#oneventname-callback", 
            "text": "Register callback for change event  Parameter     Name  Type  Required  Description      eventName  String  Yes  Name of event:  'change'    callback  function  Yes  callback     Returns  None   Sample  React  import { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n   render() {\n        return (\n             Dropdown items={this.state.items}  value={this.state.value} onChange={this.handleChange } / \n        );\n    }\n        handleChange = (value) =  {\n            this.setState({value});\n            console.log('value: ' + value);\n        }\n    }  Javascript  var dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\n    body.appendChild(dropdown.render());\n\ndropdown.on('change', function(value) {\n    console.log('on change');\n});", 
            "title": "on(eventName, callBack)"
        }, 
        {
            "location": "/Reference/Dropdown/#show", 
            "text": "Display the dropdown.  Parameter  None  Returns  None   Sample  React  import { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n   render() {\n        return (\n             Dropdown items={this.state.items}  value={this.state.value} onChange={this.handleChange}  isVisible={true} / \n        );\n    }\n\n    handleChange = (value) =  {\n        this.setState({value});\n    }\n}  Javascript  var dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\n    body.appendChild(dropdown.render());\n\ndropdown.show();", 
            "title": "show()"
        }, 
        {
            "location": "/Reference/Dropdown/#hide", 
            "text": "Hide the dropdown.  Parameter  None  Returns  None   Sample  React  import { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n   render() {\n        return (\n             Dropdown items={this.state.items}  value={this.state.value} onChange={this.handleChange}  isVisible={false} / \n        );\n\n    }\n\n    handleChange = (value) =  {\n            this.setState({value});\n    }\n}  Javascript  var dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\n    body.appendChild(dropdown.render());\n\ndropdown.hide();", 
            "title": "hide()"
        }, 
        {
            "location": "/Reference/Dropdown/#disable", 
            "text": "Disabled the dropdown.  Parameter  None  Returns  None   Sample  React  import { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n   render() {\n        return (\n             Dropdown items={this.state.items}  value={this.state.value} onChange={this.handleChange}  isDisabled={true} / \n        ); \n    }\n    handleChange = (value) =  {\n         this.setState({value});\n    }\n}  Javascript  var dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\n    body.appendChild(dropdown.render());\n\ndropdown.disable();", 
            "title": "disable()"
        }, 
        {
            "location": "/Reference/Dropdown/#enable", 
            "text": "Enabled the dropdown.  Parameter  None  Returns  None   Sample  React  import { Dropdown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n   render() {\n        return (\n             Dropdown items={this.state.items}  value={this.state.value} onChange={this.handleChange}  isDisabled={false} / \n        );\n\n    }\n\n    handleChange = (value) =  {\n        this.setState({value});\n    }\n}  Javascript  var dropdown = new kintoneUIComponent.Dropdown({\n    items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: true\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: false\n        }\n    ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\n    body.appendChild(dropdown.render());\n\ndropdown.enable();", 
            "title": "enable()"
        }, 
        {
            "location": "/Reference/IconButton/", 
            "text": "IconButton\n\n\nOverview\n\n\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nNo\n\n\nThe object contains params of constructor.\n\n\n\n\n\n\noptions.type\n\n\nString\n\n\nNo\n\n\nThe type of of button. The value is one of: \n 'insert'\n 'remove'\n 'close'\n Default value is 'insert'.\n\n\n\n\n\n\noptions.size\n\n\nString\n\n\nNo\n\n\nSize of icon button:\n 'large'\n 'small'\n Default value is 'large'.\n\n\n\n\n\n\noptions.color\n\n\nString\n\n\nNo\n\n\nColor of icon button:\n  'gray'\n'blue'\n'red'\n'green'\nDefault value is 'gray'.\n\n\n\n\n\n\noptions.isDisabled\n\n\nBoolean\n\n\nNo\n\n\nThe icon button will be disabled. \n Default value: 'false'\n\n\n\n\n\n\noptions.isVisible\n\n\nBoolean\n\n\nNo\n\n\nThe icon button will be visible. \n Default value: 'true'\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nIconButton text='insert' size='small' color='blue' /\n\n        );\n    }\n}\n\n\n\n\nJavascript\n\n\nvar insertBtn = new kintoneUIComponent.IconButton({type: 'insert',color='blue', size: 'small'});\n\n\n\n\n\n\nMethods\n\n\nrender()\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nGet dom element of component.\n\n\n\n\nSample\n\n\nReact\n\n\nimport { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nIconButton text='insert' size='small' color='blue' /\n\n        );\n    }\n}\n\n\n\n\nJavascript\n\n\nvar iconBtn = new kintoneUIComponent.IconButton({type: 'insert'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(iconBtn.render());\n\n\n\n\n\n\nsetType(type)\n\n\nSet the type of the button.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nString\n\n\nNo\n\n\nThe type of of button. The value is one of: \n 'insert'\n 'remove'\n'close'\n Default value is 'insert'.\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nIconButton text='insert' size='small' type='remove'/\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar iconBtn = new kintoneUIComponent.IconButton({type: 'insert'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(iconBtn.render());\n\niconBtn.setType('remove');\n\n\n\n\n\n\nsetSize(size)\n\n\nChange size of icon button.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsize\n\n\nString\n\n\nNo\n\n\nThe size of of button. The value is one of: \n  'normall'\n 'small'\n Default value is 'normal'.\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nIconButton text='insert' size='small' /\n\n        );\n    }\n}\n\n\n\n\nJavascript\n\n\nvar iconBtn = new kintoneUIComponent.IconButton({type: 'insert'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(iconBtn.render());\n\niconBtn.setSize('small');\n\n\n\n\n\n\non(eventName, callback)\n\n\nRegister callback for click event\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neventName\n\n\nString\n\n\nYes\n\n\nName of event: \n'click'\n\n\n\n\n\n\ncallback\n\n\nfunction\n\n\nYes\n\n\ncallback\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nIconButton text='insert' size='small' color='blue' onClick={this.handleClick} /\n\n        );\n    }\n    handleClick() {\n        console.log('on click');\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar iconBtn = new kintoneUIComponent.IconButton({type: 'insert'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(iconBtn.render());\n\niconBtn.on('click', function(event) {\n    console.log('on click');\n});\n\n\n\n\n\n\nshow()\n\n\nDisplay the icon button.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nIconButton text='insert' size='small' color='blue' isVisible={true} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar iconBtn = new kintoneUIComponent.IconButton({type: 'insert'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(iconBtn.render());\n\niconBtn.show();\n\n\n\n\n\n\nhide()\n\n\nHide the icon button.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nIconButton text='insert' size='small' color='blue' isVisible={false} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar iconBtn = new kintoneUIComponent.IconButton({type: 'insert'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(iconBtn.render());\n\niconBtn.hide();\n\n\n\n\n\n\ndisble()\n\n\nDisbled the icon button.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nIconButton text='insert' size='small' color='blue' isDisabled={true} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar iconBtn = new kintoneUIComponent.IconButton({type: 'insert'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(iconBtn.render());\n\niconBtn.disble();\n\n\n\n\n\n\nenable()\n\n\nEnabled the icon button.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nIconButton text='insert' size='small' color='blue' isDisabled={false} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar iconBtn = new kintoneUIComponent.IconButton({type: 'insert'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(iconBtn.render());\n\niconBtn.enable();", 
            "title": "IconButton"
        }, 
        {
            "location": "/Reference/IconButton/#iconbutton", 
            "text": "", 
            "title": "IconButton"
        }, 
        {
            "location": "/Reference/IconButton/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/Reference/IconButton/#constructor", 
            "text": "Parameter     Name  Type  Required  Description      options  Object  No  The object contains params of constructor.    options.type  String  No  The type of of button. The value is one of:   'insert'  'remove'  'close'  Default value is 'insert'.    options.size  String  No  Size of icon button:  'large'  'small'  Default value is 'large'.    options.color  String  No  Color of icon button:   'gray' 'blue' 'red' 'green' Default value is 'gray'.    options.isDisabled  Boolean  No  The icon button will be disabled.   Default value: 'false'    options.isVisible  Boolean  No  The icon button will be visible.   Default value: 'true'      Sample  React  import { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             IconButton text='insert' size='small' color='blue' / \n        );\n    }\n}  Javascript  var insertBtn = new kintoneUIComponent.IconButton({type: 'insert',color='blue', size: 'small'});", 
            "title": "Constructor"
        }, 
        {
            "location": "/Reference/IconButton/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/Reference/IconButton/#render", 
            "text": "Parameter  None  Returns  Get dom element of component.   Sample  React  import { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             IconButton text='insert' size='small' color='blue' / \n        );\n    }\n}  Javascript  var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(iconBtn.render());", 
            "title": "render()"
        }, 
        {
            "location": "/Reference/IconButton/#settypetype", 
            "text": "Set the type of the button.  Parameter     Name  Type  Required  Description      type  String  No  The type of of button. The value is one of:   'insert'  'remove' 'close'  Default value is 'insert'.     Returns  None   Sample  React  import { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             IconButton text='insert' size='small' type='remove'/ \n        );\n    }\n}  Javascript  var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(iconBtn.render());\n\niconBtn.setType('remove');", 
            "title": "setType(type)"
        }, 
        {
            "location": "/Reference/IconButton/#setsizesize", 
            "text": "Change size of icon button.  Parameter     Name  Type  Required  Description      size  String  No  The size of of button. The value is one of:    'normall'  'small'  Default value is 'normal'.     Returns  None   Sample  React  import { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             IconButton text='insert' size='small' / \n        );\n    }\n}  Javascript  var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(iconBtn.render());\n\niconBtn.setSize('small');", 
            "title": "setSize(size)"
        }, 
        {
            "location": "/Reference/IconButton/#oneventname-callback", 
            "text": "Register callback for click event  Parameter     Name  Type  Required  Description      eventName  String  Yes  Name of event:  'click'    callback  function  Yes  callback     Returns  None   Sample  React  import { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             IconButton text='insert' size='small' color='blue' onClick={this.handleClick} / \n        );\n    }\n    handleClick() {\n        console.log('on click');\n    }\n}  Javascript  var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(iconBtn.render());\n\niconBtn.on('click', function(event) {\n    console.log('on click');\n});", 
            "title": "on(eventName, callback)"
        }, 
        {
            "location": "/Reference/IconButton/#show", 
            "text": "Display the icon button.  Parameter  None  Returns  None   Sample  React  import { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             IconButton text='insert' size='small' color='blue' isVisible={true} / \n        );\n    }\n}  Javascript  var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(iconBtn.render());\n\niconBtn.show();", 
            "title": "show()"
        }, 
        {
            "location": "/Reference/IconButton/#hide", 
            "text": "Hide the icon button.  Parameter  None  Returns  None   Sample  React  import { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             IconButton text='insert' size='small' color='blue' isVisible={false} / \n        );\n    }\n}  Javascript  var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(iconBtn.render());\n\niconBtn.hide();", 
            "title": "hide()"
        }, 
        {
            "location": "/Reference/IconButton/#disble", 
            "text": "Disbled the icon button.  Parameter  None  Returns  None   Sample  React  import { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             IconButton text='insert' size='small' color='blue' isDisabled={true} / \n        );\n    }\n}  Javascript  var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(iconBtn.render());\n\niconBtn.disble();", 
            "title": "disble()"
        }, 
        {
            "location": "/Reference/IconButton/#enable", 
            "text": "Enabled the icon button.  Parameter  None  Returns  None   Sample  React  import { IconButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             IconButton text='insert' size='small' color='blue' isDisabled={false} / \n        );\n    }\n}  Javascript  var iconBtn = new kintoneUIComponent.IconButton({type: 'insert'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(iconBtn.render());\n\niconBtn.enable();", 
            "title": "enable()"
        }, 
        {
            "location": "/Reference/Label/", 
            "text": "Label\n\n\nOverview\n\n\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nNo\n\n\nThe object contains params of constructor.\n\n\n\n\n\n\noptions.text\n\n\nString\n\n\nNo\n\n\nCaption of label.\n\n\n\n\n\n\noptions.isRequired\n\n\nString\n\n\nNo\n\n\nDisplay the '*' character at the end of the caption. \n Default value is false.\n\n\n\n\n\n\noptions.isDisabled\n\n\nBoolean\n\n\nNo\n\n\nThe label will be disabled. \n Default value: 'false'\n\n\n\n\n\n\noptions.isVisible\n\n\nBoolean\n\n\nNo\n\n\nThe label will be visible. \n Default value: 'true'\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nLabel text='Name' isRequired={true} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar label = new kintoneUIComponent.Label({\n    text: 'Name',\n    isRequired: true\n});\n\n\n\n\n\n\nMethods\n\n\nrender()\n\n\nGet dom element of component.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nDom element\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nLabel text='Name' isRequired={true} /\n\n        );\n    }\n}\n\n\n\n\nJavascript\n\n\nvar label = new kintoneUIComponent.Label({text: 'label'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(label.render());\n\n\n\n\n\n\nsetText(text)\n\n\nSet the value of text field.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nString\n\n\nYes\n\n\nCaption of label. \n If text is undefined, null or true, The label will be displayed blank\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nLabel text='Name' isRequired={true} /\n\n        );\n    }\n}\n\n\n\n\nJavascript\n  \n\n\nvar label = new kintoneUIComponent.Label({text: 'label'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(label.render());\nlabel.setText('Name');\n\n\n\n\n\n\nsetRequired(required)\n\n\nSet the required for the label.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrequired\n\n\nBoolean\n\n\nYes\n\n\nRequired option.\nThis parameter is 'true':  The *  character will be displayed at the end of the caption. \nThis parameter is 'false': The *  character will be hidden\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nLabel text='Name' isRequired={true} /\n\n        );\n    }\n}\n\n\n\n\nJavascript\n\n\nvar label = new kintoneUIComponent.Label({text: 'label'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(label.render());\nlabel.setRequired(true);\n\n\n\n\n\n\non(eventName, callBack)\n\n\nRegister callback for click event\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neventName\n\n\nString\n\n\nYes\n\n\nName of event: \n'click'\n\n\n\n\n\n\ncallback\n\n\nfunction\n\n\nYes\n\n\ncallback\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nLabel text='Name' isRequired={true} onClick={this.handleClick} /\n\n        );\n    }\n   handleClick(){\n        console.log('click');\n   }\n    }\n\n\n\n\n\nJavascript\n\n\nvar label = new kintoneUIComponent.Label({text: 'label'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(label.render());\nlabel.on('click', function(event) {\n    console.log('on click');\n});\n\n\n\n\n\n\nshow()\n\n\nDisplay the Label.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nLabel text='Name' isRequired={true}  isVisible={true} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar label = new kintoneUIComponent.Label({text: 'label'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(label.render());\nlabel.show();\n\n\n\n\n\n\nhide()\n\n\nHide the Label.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nLabel text='Name' isRequired={true}  isVisible={false} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar label = new kintoneUIComponent.Label({text: 'label'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(label.render());\nlabel.hide();\n\n\n\n\n\n\ndisable()\n\n\nDisabled the Label.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nLabel text='Name' isRequired={true}  isDisabled={true} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar label = new kintoneUIComponent.Label({text: 'label'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(label.render());\nlabel.disable();\n\n\n\n\n\n\nenable()\n\n\nEnabled the Label.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nLabel text='Name' isRequired={true}  isDisabled={false} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar label = new kintoneUIComponent.Label({text: 'label'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(label.render());\nlabel.enable();", 
            "title": "Label"
        }, 
        {
            "location": "/Reference/Label/#label", 
            "text": "", 
            "title": "Label"
        }, 
        {
            "location": "/Reference/Label/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/Reference/Label/#constructor", 
            "text": "Parameter     Name  Type  Required  Description      options  Object  No  The object contains params of constructor.    options.text  String  No  Caption of label.    options.isRequired  String  No  Display the '*' character at the end of the caption.   Default value is false.    options.isDisabled  Boolean  No  The label will be disabled.   Default value: 'false'    options.isVisible  Boolean  No  The label will be visible.   Default value: 'true'      Sample  React  import { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Label text='Name' isRequired={true} / \n        );\n    }\n}  Javascript  var label = new kintoneUIComponent.Label({\n    text: 'Name',\n    isRequired: true\n});", 
            "title": "Constructor"
        }, 
        {
            "location": "/Reference/Label/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/Reference/Label/#render", 
            "text": "Get dom element of component.  Parameter  None  Returns  Dom element   Sample  React  import { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Label text='Name' isRequired={true} / \n        );\n    }\n}  Javascript  var label = new kintoneUIComponent.Label({text: 'label'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(label.render());", 
            "title": "render()"
        }, 
        {
            "location": "/Reference/Label/#settexttext", 
            "text": "Set the value of text field.  Parameter     Name  Type  Required  Description      text  String  Yes  Caption of label.   If text is undefined, null or true, The label will be displayed blank     Returns  None   Sample  React  import { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Label text='Name' isRequired={true} / \n        );\n    }\n}  Javascript     var label = new kintoneUIComponent.Label({text: 'label'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(label.render());\nlabel.setText('Name');", 
            "title": "setText(text)"
        }, 
        {
            "location": "/Reference/Label/#setrequiredrequired", 
            "text": "Set the required for the label.  Parameter     Name  Type  Required  Description      required  Boolean  Yes  Required option. This parameter is 'true':  The *  character will be displayed at the end of the caption.  This parameter is 'false': The *  character will be hidden     Returns  None   Sample  React  import { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Label text='Name' isRequired={true} / \n        );\n    }\n}  Javascript  var label = new kintoneUIComponent.Label({text: 'label'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(label.render());\nlabel.setRequired(true);", 
            "title": "setRequired(required)"
        }, 
        {
            "location": "/Reference/Label/#oneventname-callback", 
            "text": "Register callback for click event  Parameter     Name  Type  Required  Description      eventName  String  Yes  Name of event:  'click'    callback  function  Yes  callback     Returns  None   Sample  React  import { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Label text='Name' isRequired={true} onClick={this.handleClick} / \n        );\n    }\n   handleClick(){\n        console.log('click');\n   }\n    }  Javascript  var label = new kintoneUIComponent.Label({text: 'label'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(label.render());\nlabel.on('click', function(event) {\n    console.log('on click');\n});", 
            "title": "on(eventName, callBack)"
        }, 
        {
            "location": "/Reference/Label/#show", 
            "text": "Display the Label.  Parameter  None  Returns  None   Sample  React  import { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Label text='Name' isRequired={true}  isVisible={true} / \n        );\n    }\n}  Javascript  var label = new kintoneUIComponent.Label({text: 'label'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(label.render());\nlabel.show();", 
            "title": "show()"
        }, 
        {
            "location": "/Reference/Label/#hide", 
            "text": "Hide the Label.  Parameter  None  Returns  None   Sample  React  import { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Label text='Name' isRequired={true}  isVisible={false} / \n        );\n    }\n}  Javascript  var label = new kintoneUIComponent.Label({text: 'label'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(label.render());\nlabel.hide();", 
            "title": "hide()"
        }, 
        {
            "location": "/Reference/Label/#disable", 
            "text": "Disabled the Label.  Parameter  None  Returns  None   Sample  React  import { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Label text='Name' isRequired={true}  isDisabled={true} / \n        );\n    }\n}  Javascript  var label = new kintoneUIComponent.Label({text: 'label'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(label.render());\nlabel.disable();", 
            "title": "disable()"
        }, 
        {
            "location": "/Reference/Label/#enable", 
            "text": "Enabled the Label.  Parameter  None  Returns  None   Sample  React  import { Label } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Label text='Name' isRequired={true}  isDisabled={false} / \n        );\n    }\n}  Javascript  var label = new kintoneUIComponent.Label({text: 'label'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(label.render());\nlabel.enable();", 
            "title": "enable()"
        }, 
        {
            "location": "/Reference/MultipleChoice/", 
            "text": "MultipleChoice\n\n\nOverview\n\n\n\n\n\n\n\n\n\n\nNumber\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nTitle\n\n\n\n\n\n\n2\n\n\nSelected item\n\n\n\n\n\n\n3\n\n\nNot selected item\n\n\n\n\n\n\n4\n\n\nDisabled item\n\n\n\n\n\n\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nNo\n\n\nThe object contains params of constructor.\n\n\n\n\n\n\noptions.items\n\n\nArray\nObject\n\n\nNo\n\n\nList of items which will be displayed on multiple choices.\n\n\n\n\n\n\noptions.items[].value\n\n\nString\n\n\nYes\n\n\nString value of item \n If the value is duplicate, the error message will be displayed\n\n\n\n\n\n\noptions.items[].label\n\n\nString\n\n\nNo\n\n\nString label of item\n\n\n\n\n\n\noptions.items[].isDisabled\n\n\nBoolean\n\n\nNo\n\n\nIndicate item will be disabled when display. Default value: 'false'.\n\n\n\n\n\n\noptions.value\n\n\nArray\n\n\nNo\n\n\nList of checked item.\n If the 'options.value[]' is nonexistent value, the error will be displayed\n\n\n\n\n\n\noptions.isDisabled\n\n\nBoolean\n\n\nNo\n\n\nThe multiple choices will be disabled. \n Default value: 'false'\n\n\n\n\n\n\noptions.isVisible\n\n\nBoolean\n\n\nNo\n\n\nThe multiple choices will be visible. \n Default value: 'true'\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = { items: items, value: ['Orange'] };\n    }\n    render() {\n        return (\n            \nMultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n        );\n    }\n}\n\n\n\n\nJavascript\n\n\nvar mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\n\n\n\n\n\nMethods\n\n\nrender()\n\n\nGet dom element of component.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nDom element\n\n\n\n\nSample\n\n\nReact\n\n\nimport { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = { items: items, value: ['Orange'] };\n    }\n    render() {\n        return (\n            \nMultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n        );\n    }\n}\n\n\n\n\nJavascript\n\n\nvar mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(mulChoice.render());\n\n\n\n\n\n\n\naddItem(item)\n\n\nAdd an item to the end of multile choices list.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nitem\n\n\nObject\n\n\nYes\n\n\nThe item will be added to multile choices list.\n\n\n\n\n\n\nitem.value\n\n\nString\n\n\nYes\n\n\nThe value of an item.\n\n\n\n\n\n\nitem.label\n\n\nString\n\n\nNo\n\n\nDisplay string.\n\n\n\n\n\n\nitem.isDisabled\n\n\nBoolean\n\n\nNo\n\n\nIndicate item will be disabled when display. \n Default value: 'false'\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: []\n        }\n    }\n\n    render() {\n        return (\n        \ndiv\n\n          \nMultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nAdd item\n/button\n\n        \n/div\n\n      );\n    }\n\n    handleClick = () =\n {\n      const item = {\n        label: 'Lemon',\n        value: 'Lemon',\n        isDisabled: false\n      };\n      this.setState(prevState =\n ({\n        items: prevState.items ? prevState.items.concat([item]) : [item]\n      }))\n    }\n}\n\n\n\n\nJavascript\n\n\nvar mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(mulChoice.render());\n\n\nmulChoice.addItem({\n    label: 'Grape',\n    value: 'Grape',\n    isDisabled: false\n});\n\n\n\n\n\n\ngetItem(index)\n\n\nGet the item of specific position in multiple choices list.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nindex\n\n\nInteger\n\n\nYes\n\n\nThe position of retrieved item.\n\n\n\n\n\n\n\n\nReturns\n\n\nThe item at given position.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nitem\n\n\nObject\n\n\nThe item of specific position in multiple choices list.\n\n\n\n\n\n\nitem.value\n\n\nString\n\n\nThe value of an item.\n\n\n\n\n\n\nitem.label\n\n\nString\n\n\nDisplay string.\n\n\n\n\n\n\nitem.isDisabled\n\n\nBoolean\n\n\nIndicate item will be disabled when display.\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: false\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: true\n        },\n        {\n            label: 'Lemon',\n            value: 'Lemon',\n            isDisabled: true\n        },\n    ]\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n        \ndiv\n\n          \nMultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nGet Item\n/button\n\n        \n/div\n\n      );\n    }\n\n    handleClick = () =\n {\n        console.log(this.state.items[0]);\n    }\n}\n\n\n\n\nJavascript\n\n\nvar mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(mulChoice.render());\n\nvar firstItem = mulChoice.getItem(0);\nconsole.log(firstItem);\n\n\n\n\n\n\nremoveItem(index)\n\n\nRemove the specific item from multiple choice list.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nindex\n\n\nInteger\n\n\nYes\n\n\nThe position of retrieved item.\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: []\n        }\n    }\n\n    render() {\n        return (\n        \ndiv\n\n          \nMultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nRemove Item\n/button\n\n        \n/div\n\n      );\n    }\n\n    handleClick = () =\n {\n      this.setState(prevState =\n {\n        if (prevState.items) {\n            return prevState.items.splice(0, 1);\n        }\n        return prevState;\n      });\n    }\n}\n\n\n\n\nJavascript\n\n\nvar mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(mulChoice.render());\n\n\nmulChoice.removeItem(0);\n\n\n\n\n\n\ngetItems()\n\n\nGet all items of the multiple choice.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nMultiple choice list item.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nitems\n\n\nArray\nObject\n\n\nList items of the multiple choice\n\n\n\n\n\n\nitems[].value\n\n\nString\n\n\nThe value of an item.\n\n\n\n\n\n\nitems[].label\n\n\nString\n\n\nDisplay string.\n\n\n\n\n\n\nitems[].isDisabled\n\n\nBoolean\n\n\nIndicate item will be disabled when display.\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n        \ndiv\n\n          \nMultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nGet Items\n/button\n\n        \n/div\n\n      );\n    }\n\n    handleClick = () =\n {\n        this.state.items.forEach(item =\n {\n            console.log(item);\n        });\n    }\n}\n\n\n\n\nJavascript\n\n\nvar mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(mulChoice.render());\n\nvar items = mulChoice.getItems();\nitems.forEach(function(item) {\n    console.log(item.value + ':' + item.isDisabled);\n});\n\n\n\n\n\n\ngetValue()\n\n\nGet the checked values of multiple choice.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nList of checked items.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nArray\nString\n\n\nList selected values of the multiple choice.\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n        \ndiv\n\n          \nMultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nGet Value\n/button\n\n        \n/div\n\n      );\n    }\n\n    handleClick = () =\n {\n       console.log(this.state.value);\n    }\n}\n\n\n\n\nJavascript\n\n\nvar mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(mulChoice.render());\n\nvar selectedItems = mulChoice.getValue();\nselectedItems.forEach(function(item) {\n    console.log(item);\n});\n\n\n\n\n\n\nsetValue(value)\n\n\nSet the checked value of multiple choice.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nArray\nString\n\n\nyes\n\n\nThe value of an item.\n If the 'value[]' is nonexistent value, the error will be displayed\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\n\nimport { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n        \ndiv\n\n          \nMultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nSet Value\n/button\n\n        \n/div\n\n      );\n    }\n\n    handleClick = () =\n {\n        this.setState({\n            value: ['Lemon']\n        });\n    }\n}\n\n\n\n\nJavascript\n\n\nvar mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(mulChoice.render());\n\nmulChoice.setValue(['Lemon']);\n\n\n\n\n\n\ndisableItem(value)\n\n\nSet the disabled items of multiple choice.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nyes\n\n\nThe value of an item\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n        \ndiv\n\n          \nMultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nDisabled Item\n/button\n\n        \n/div\n\n      );\n    }\n\n    handleClick = () =\n {\n        const items = [...this.state.items];\n\n        items[0].isDisabled = true;\n        this.setState({ items: items });\n    }\n}\n\n\n\n\nJavascript\n\n\nvar mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(mulChoice.render());\n\n\nmulChoice.disableItem('Orange');\n\n\n\n\n\n\nenableItem(value)\n\n\nSet the enable items of multiple choice.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nyes\n\n\nThe value of an item\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n        \ndiv\n\n          \nMultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nEnabled Item\n/button\n\n        \n/div\n\n      );\n    }\n\n    handleClick = () =\n {\n        const items = [...this.state.items];\n\n        items[1].isDisabled = false;\n        this.setState({ items: items });\n    }\n}\n\n\n\n\nJavascript\n\n\nvar mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(mulChoice.render());\n\nmulChoice.enableItem('Banana');\n\n\n\n\n\n\non(eventName, callBack)\n\n\nRegister callback for change event\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neventName\n\n\nString\n\n\nYes\n\n\nName of event: \n'change'\n\n\n\n\n\n\ncallback\n\n\nfunction\n\n\nYes\n\n\ncallback\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n            \nMultipleChoice items={this.state.items} value={this.state.value} onChange={this.handleChange} /\n\n        );\n    }\n\n    handleChange= () =\n {\n        const items = [...this.state.items];\n\n        items[1].isDisabled = false;\n        this.setState({ items: items });\n    }\n}\n\n\n\n\nJavascript\n\n\nvar mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(mulChoice.render());\n\nmulChoice.on('change', function(value) {\n    console.log('on change');\n});\n\n\n\n\n\n\nshow()\n\n\nDisplay the multiple choice.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n            \nMultipleChoice value={this.state.value} isVisible={true} items={this.state.items} onClick={this.handleClick}/\n\n        );\n    }\n\n    handleClick = () =\n {\n        const items = [...this.state.items];\n\n        items[1].isDisabled = false;\n        this.setState({ items: items });\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(mulChoice.render());\n\nmulChoice.show();\n\n\n\n\n\n\nhide()\n\n\nHide the multiple choice.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n            \nMultipleChoice value={this.state.value} isVisible={false} items={this.state.items} onClick={this.handleClick}/\n\n        );\n    }\n\n    handleClick = () =\n {\n        const items = [...this.state.items];\n\n        items[1].isDisabled = false;\n        this.setState({ items: items });\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(mulChoice.render());\n\nmulChoice.hide();\n\n\n\n\n\n\ndisable()\n\n\nDisabled the multiple choice.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n            \nMultipleChoice value={this.state.value} isDisabled={true} items={this.state.items} onClick={this.handleClick}/\n\n        );\n    }\n\n    handleClick = () =\n {\n        const items = [...this.state.items];\n\n        items[1].isDisabled = false;\n        this.setState({ items: items });\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(mulChoice.render());\n\n\nmulChoice.disable();\n\n\n\n\n\n\nenable()\n\n\nEnabled the multiple choice.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n            \nMultipleChoice value={this.state.value} isDisabled={false} items={this.state.items} onClick={this.handleClick}/\n\n        );\n    }\n\n    handleClick = () =\n {\n        const items = [...this.state.items];\n\n        items[1].isDisabled = false;\n        this.setState({ items: items });\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(mulChoice.render());\n\n\nmulChoice.enable();", 
            "title": "MultipleChoice"
        }, 
        {
            "location": "/Reference/MultipleChoice/#multiplechoice", 
            "text": "", 
            "title": "MultipleChoice"
        }, 
        {
            "location": "/Reference/MultipleChoice/#overview", 
            "text": "Number  Description      1  Title    2  Selected item    3  Not selected item    4  Disabled item", 
            "title": "Overview"
        }, 
        {
            "location": "/Reference/MultipleChoice/#constructor", 
            "text": "Parameter     Name  Type  Required  Description      options  Object  No  The object contains params of constructor.    options.items  Array Object  No  List of items which will be displayed on multiple choices.    options.items[].value  String  Yes  String value of item   If the value is duplicate, the error message will be displayed    options.items[].label  String  No  String label of item    options.items[].isDisabled  Boolean  No  Indicate item will be disabled when display. Default value: 'false'.    options.value  Array  No  List of checked item.  If the 'options.value[]' is nonexistent value, the error will be displayed    options.isDisabled  Boolean  No  The multiple choices will be disabled.   Default value: 'false'    options.isVisible  Boolean  No  The multiple choices will be visible.   Default value: 'true'      Sample  React  import { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = { items: items, value: ['Orange'] };\n    }\n    render() {\n        return (\n             MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n        );\n    }\n}  Javascript  var mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});", 
            "title": "Constructor"
        }, 
        {
            "location": "/Reference/MultipleChoice/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/Reference/MultipleChoice/#render", 
            "text": "Get dom element of component.  Parameter  None  Returns  Dom element   Sample  React  import { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = { items: items, value: ['Orange'] };\n    }\n    render() {\n        return (\n             MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n        );\n    }\n}  Javascript  var mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(mulChoice.render());", 
            "title": "render()"
        }, 
        {
            "location": "/Reference/MultipleChoice/#additemitem", 
            "text": "Add an item to the end of multile choices list.  Parameter     Name  Type  Required  Description      item  Object  Yes  The item will be added to multile choices list.    item.value  String  Yes  The value of an item.    item.label  String  No  Display string.    item.isDisabled  Boolean  No  Indicate item will be disabled when display.   Default value: 'false'     Returns  None   Sample  React  import { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: []\n        }\n    }\n\n    render() {\n        return (\n         div \n           MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Add item /button \n         /div \n      );\n    }\n\n    handleClick = () =  {\n      const item = {\n        label: 'Lemon',\n        value: 'Lemon',\n        isDisabled: false\n      };\n      this.setState(prevState =  ({\n        items: prevState.items ? prevState.items.concat([item]) : [item]\n      }))\n    }\n}  Javascript  var mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(mulChoice.render());\n\n\nmulChoice.addItem({\n    label: 'Grape',\n    value: 'Grape',\n    isDisabled: false\n});", 
            "title": "addItem(item)"
        }, 
        {
            "location": "/Reference/MultipleChoice/#getitemindex", 
            "text": "Get the item of specific position in multiple choices list.  Parameter     Name  Type  Required  Description      index  Integer  Yes  The position of retrieved item.     Returns  The item at given position.     Name  Type  Description      item  Object  The item of specific position in multiple choices list.    item.value  String  The value of an item.    item.label  String  Display string.    item.isDisabled  Boolean  Indicate item will be disabled when display.      Sample  React  import { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        items: [\n        {\n            label: 'Orange',\n            value: 'Orange',\n            isDisabled: false\n        },\n        {\n            label: 'Banana',\n            value: 'Banana',\n            isDisabled: true\n        },\n        {\n            label: 'Lemon',\n            value: 'Lemon',\n            isDisabled: true\n        },\n    ]\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n         div \n           MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Get Item /button \n         /div \n      );\n    }\n\n    handleClick = () =  {\n        console.log(this.state.items[0]);\n    }\n}  Javascript  var mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(mulChoice.render());\n\nvar firstItem = mulChoice.getItem(0);\nconsole.log(firstItem);", 
            "title": "getItem(index)"
        }, 
        {
            "location": "/Reference/MultipleChoice/#removeitemindex", 
            "text": "Remove the specific item from multiple choice list.  Parameter     Name  Type  Required  Description      index  Integer  Yes  The position of retrieved item.     Returns  None   Sample  React  import { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: []\n        }\n    }\n\n    render() {\n        return (\n         div \n           MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Remove Item /button \n         /div \n      );\n    }\n\n    handleClick = () =  {\n      this.setState(prevState =  {\n        if (prevState.items) {\n            return prevState.items.splice(0, 1);\n        }\n        return prevState;\n      });\n    }\n}  Javascript  var mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(mulChoice.render());\n\n\nmulChoice.removeItem(0);", 
            "title": "removeItem(index)"
        }, 
        {
            "location": "/Reference/MultipleChoice/#getitems", 
            "text": "Get all items of the multiple choice.  Parameter  None  Returns  Multiple choice list item.     Name  Type  Description      items  Array Object  List items of the multiple choice    items[].value  String  The value of an item.    items[].label  String  Display string.    items[].isDisabled  Boolean  Indicate item will be disabled when display.      Sample  React  import { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n         div \n           MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Get Items /button \n         /div \n      );\n    }\n\n    handleClick = () =  {\n        this.state.items.forEach(item =  {\n            console.log(item);\n        });\n    }\n}  Javascript  var mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(mulChoice.render());\n\nvar items = mulChoice.getItems();\nitems.forEach(function(item) {\n    console.log(item.value + ':' + item.isDisabled);\n});", 
            "title": "getItems()"
        }, 
        {
            "location": "/Reference/MultipleChoice/#getvalue", 
            "text": "Get the checked values of multiple choice.  Parameter  None  Returns  List of checked items.     Name  Type  Description      value  Array String  List selected values of the multiple choice.      Sample  React  import { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n         div \n           MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Get Value /button \n         /div \n      );\n    }\n\n    handleClick = () =  {\n       console.log(this.state.value);\n    }\n}  Javascript  var mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(mulChoice.render());\n\nvar selectedItems = mulChoice.getValue();\nselectedItems.forEach(function(item) {\n    console.log(item);\n});", 
            "title": "getValue()"
        }, 
        {
            "location": "/Reference/MultipleChoice/#setvaluevalue", 
            "text": "Set the checked value of multiple choice.  Parameter     Name  Type  Required  Description      value  Array String  yes  The value of an item.  If the 'value[]' is nonexistent value, the error will be displayed     Returns  None   Sample  React  \nimport { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n         div \n           MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Set Value /button \n         /div \n      );\n    }\n\n    handleClick = () =  {\n        this.setState({\n            value: ['Lemon']\n        });\n    }\n}  Javascript  var mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(mulChoice.render());\n\nmulChoice.setValue(['Lemon']);", 
            "title": "setValue(value)"
        }, 
        {
            "location": "/Reference/MultipleChoice/#disableitemvalue", 
            "text": "Set the disabled items of multiple choice.  Parameter     Name  Type  Required  Description      value  String  yes  The value of an item     Returns  None   Sample  React  import { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n         div \n           MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Disabled Item /button \n         /div \n      );\n    }\n\n    handleClick = () =  {\n        const items = [...this.state.items];\n\n        items[0].isDisabled = true;\n        this.setState({ items: items });\n    }\n}  Javascript  var mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(mulChoice.render());\n\n\nmulChoice.disableItem('Orange');", 
            "title": "disableItem(value)"
        }, 
        {
            "location": "/Reference/MultipleChoice/#enableitemvalue", 
            "text": "Set the enable items of multiple choice.  Parameter     Name  Type  Required  Description      value  String  yes  The value of an item     Returns  None   Sample  React  import { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n         div \n           MultipleChoice items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Enabled Item /button \n         /div \n      );\n    }\n\n    handleClick = () =  {\n        const items = [...this.state.items];\n\n        items[1].isDisabled = false;\n        this.setState({ items: items });\n    }\n}  Javascript  var mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(mulChoice.render());\n\nmulChoice.enableItem('Banana');", 
            "title": "enableItem(value)"
        }, 
        {
            "location": "/Reference/MultipleChoice/#oneventname-callback", 
            "text": "Register callback for change event  Parameter     Name  Type  Required  Description      eventName  String  Yes  Name of event:  'change'    callback  function  Yes  callback     Returns  None   Sample  React  import { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n             MultipleChoice items={this.state.items} value={this.state.value} onChange={this.handleChange} / \n        );\n    }\n\n    handleChange= () =  {\n        const items = [...this.state.items];\n\n        items[1].isDisabled = false;\n        this.setState({ items: items });\n    }\n}  Javascript  var mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(mulChoice.render());\n\nmulChoice.on('change', function(value) {\n    console.log('on change');\n});", 
            "title": "on(eventName, callBack)"
        }, 
        {
            "location": "/Reference/MultipleChoice/#show", 
            "text": "Display the multiple choice.  Parameter  None  Returns  None   Sample  React  import { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n             MultipleChoice value={this.state.value} isVisible={true} items={this.state.items} onClick={this.handleClick}/ \n        );\n    }\n\n    handleClick = () =  {\n        const items = [...this.state.items];\n\n        items[1].isDisabled = false;\n        this.setState({ items: items });\n    }\n}  Javascript  var mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(mulChoice.render());\n\nmulChoice.show();", 
            "title": "show()"
        }, 
        {
            "location": "/Reference/MultipleChoice/#hide", 
            "text": "Hide the multiple choice.  Parameter  None  Returns  None   Sample  React  import { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n             MultipleChoice value={this.state.value} isVisible={false} items={this.state.items} onClick={this.handleClick}/ \n        );\n    }\n\n    handleClick = () =  {\n        const items = [...this.state.items];\n\n        items[1].isDisabled = false;\n        this.setState({ items: items });\n    }\n}  Javascript  var mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(mulChoice.render());\n\nmulChoice.hide();", 
            "title": "hide()"
        }, 
        {
            "location": "/Reference/MultipleChoice/#disable", 
            "text": "Disabled the multiple choice.  Parameter  None  Returns  None   Sample  React  import { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n             MultipleChoice value={this.state.value} isDisabled={true} items={this.state.items} onClick={this.handleClick}/ \n        );\n    }\n\n    handleClick = () =  {\n        const items = [...this.state.items];\n\n        items[1].isDisabled = false;\n        this.setState({ items: items });\n    }\n}  Javascript  var mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(mulChoice.render());\n\n\nmulChoice.disable();", 
            "title": "disable()"
        }, 
        {
            "location": "/Reference/MultipleChoice/#enable", 
            "text": "Enabled the multiple choice.  Parameter  None  Returns  None   Sample  React  import { MultipleChoice } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n             MultipleChoice value={this.state.value} isDisabled={false} items={this.state.items} onClick={this.handleClick}/ \n        );\n    }\n\n    handleClick = () =  {\n        const items = [...this.state.items];\n\n        items[1].isDisabled = false;\n        this.setState({ items: items });\n    }\n}  Javascript  var mulChoice = new kintoneUIComponent.MultipleChoice({\n       items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n     ],\n     value: ['Orange', 'Banana']\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(mulChoice.render());\n\n\nmulChoice.enable();", 
            "title": "enable()"
        }, 
        {
            "location": "/Reference/NotifyPopup/", 
            "text": "NotifyPopup\n\n\nOverview\n\n\n\n\n\n\n\n\n\n\nNumber\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nSuccess popup\n\n\n\n\n\n\n2\n\n\nError popup\n\n\n\n\n\n\n3\n\n\nIcon button for closing popup\n\n\n\n\n\n\n4\n\n\nTitle of popup\n\n\n\n\n\n\n5\n\n\nInformation popup\n\n\n\n\n\n\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nNo\n\n\nThe object contains params of constructor.\n\n\n\n\n\n\noptions.text\n\n\nString\n\n\nNo\n\n\nDisplayed text on notify popup.\n\n\n\n\n\n\noptions.type\n\n\nString\n\n\nNo\n\n\nType of notify popup:\n 'error' \n 'success'\n 'infor' \n Default value: 'error'\n\n\n\n\n\n\noptions.isDisabled\n\n\nBoolean\n\n\nNo\n\n\nThe notify popup will be disabled. \n Default value: 'false'\n\n\n\n\n\n\noptions.isVisible\n\n\nBoolean\n\n\nNo\n\n\nThe notify popup will be visible. \n Default value: 'true'\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nNotifyPopup text='Submit successfully' type='success' /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\n\n\n\n\n\n\nMethods\n\n\nrender()\n\n\nGet dom element of component.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nDom element\n\n\n\n\nSample\n\n\nReact\n\n\nimport { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nNotifyPopup text='Submit successfully' type='success' /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(notifyPopup.render());\n\n\n\n\n\n\n\nsetText(text)\n\n\nSetting the displayed text on popup.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nString\n\n\nYes\n\n\nDisplayed text on notify popup. \n If text is undefined, null or true, The popup will be displayed blank.\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nNotifyPopup text='Submit successfully' type='success' /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(notifyPopup.render());\n\nnotifyPopup.setText('Submit failed');\n\n\n\n\n\n\nsetType(type)\n\n\nSetting type for popup.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nString\n\n\nNo\n\n\nType of notify popup:\n 'error' \n 'success' \n 'infor' \n Default value: 'error'\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nNotifyPopup text='Submit successfully' type='success' /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(notifyPopup.render());\n\nnotifyPopup.setType('success');\n\n\n\n\n\n\non(eventName, callback)\n\n\nRegister callback for click event\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neventName\n\n\nString\n\n\nYes\n\n\nName of event: \n'click'\n\n\n\n\n\n\ncallback\n\n\nfunction\n\n\nYes\n\n\ncallback\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nNotifyPopup text='Submit successfully' type='success' onClick={this.handleClick} /\n\n        );\n    }\n\n    handleClick(event) {\n        console.log('on click');\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(notifyPopup.render());\n\nnotifyPopup.on('click', function(event) {\n    console.log('on click');\n});\n\n\n\n\n\n\nshow()\n\n\nDisplay the notify popup.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nNotifyPopup text='Submit successfully' type='success' isVisible={true} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(notifyPopup.render());\n\nnotifyPopup.show();\n\n\n\n\n\n\nhide()\n\n\nHide the notify popup.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nNotifyPopup text='Submit successfully' type='success' isVisible={false} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(notifyPopup.render());\n\nnotifyPopup.hide();\n\n\n\n\n\n\ndisable()\n\n\nDisabled the notify popup.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nNotifyPopup text='Submit successfully' type='success' isDisabled={true} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(notifyPopup.render());\n\nnotifyPopup.disable();\n\n\n\n\n\n\nenable()\n\n\nEnabled the notify popup.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nNotifyPopup text='Submit successfully' type='success' isDisabled={false} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(notifyPopup.render());\n\nnotifyPopup.enable();", 
            "title": "NotifyPopup"
        }, 
        {
            "location": "/Reference/NotifyPopup/#notifypopup", 
            "text": "", 
            "title": "NotifyPopup"
        }, 
        {
            "location": "/Reference/NotifyPopup/#overview", 
            "text": "Number  Description      1  Success popup    2  Error popup    3  Icon button for closing popup    4  Title of popup    5  Information popup", 
            "title": "Overview"
        }, 
        {
            "location": "/Reference/NotifyPopup/#constructor", 
            "text": "Parameter     Name  Type  Required  Description      options  Object  No  The object contains params of constructor.    options.text  String  No  Displayed text on notify popup.    options.type  String  No  Type of notify popup:  'error'   'success'  'infor'   Default value: 'error'    options.isDisabled  Boolean  No  The notify popup will be disabled.   Default value: 'false'    options.isVisible  Boolean  No  The notify popup will be visible.   Default value: 'true'      Sample  React  import { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             NotifyPopup text='Submit successfully' type='success' / \n        );\n    }\n}  Javascript  var notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});", 
            "title": "Constructor"
        }, 
        {
            "location": "/Reference/NotifyPopup/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/Reference/NotifyPopup/#render", 
            "text": "Get dom element of component.  Parameter  None  Returns  Dom element   Sample  React  import { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             NotifyPopup text='Submit successfully' type='success' / \n        );\n    }\n}  Javascript  var notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(notifyPopup.render());", 
            "title": "render()"
        }, 
        {
            "location": "/Reference/NotifyPopup/#settexttext", 
            "text": "Setting the displayed text on popup.  Parameter     Name  Type  Required  Description      text  String  Yes  Displayed text on notify popup.   If text is undefined, null or true, The popup will be displayed blank.     Returns  None   Sample  React  import { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             NotifyPopup text='Submit successfully' type='success' / \n        );\n    }\n}  Javascript  var notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(notifyPopup.render());\n\nnotifyPopup.setText('Submit failed');", 
            "title": "setText(text)"
        }, 
        {
            "location": "/Reference/NotifyPopup/#settypetype", 
            "text": "Setting type for popup.  Parameter     Name  Type  Required  Description      type  String  No  Type of notify popup:  'error'   'success'   'infor'   Default value: 'error'     Returns  None   Sample  React  import { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             NotifyPopup text='Submit successfully' type='success' / \n        );\n    }\n}  Javascript  var notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(notifyPopup.render());\n\nnotifyPopup.setType('success');", 
            "title": "setType(type)"
        }, 
        {
            "location": "/Reference/NotifyPopup/#oneventname-callback", 
            "text": "Register callback for click event  Parameter     Name  Type  Required  Description      eventName  String  Yes  Name of event:  'click'    callback  function  Yes  callback     Returns  None   Sample  React  import { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             NotifyPopup text='Submit successfully' type='success' onClick={this.handleClick} / \n        );\n    }\n\n    handleClick(event) {\n        console.log('on click');\n    }\n}  Javascript  var notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(notifyPopup.render());\n\nnotifyPopup.on('click', function(event) {\n    console.log('on click');\n});", 
            "title": "on(eventName, callback)"
        }, 
        {
            "location": "/Reference/NotifyPopup/#show", 
            "text": "Display the notify popup.  Parameter  None  Returns  None   Sample  React  import { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             NotifyPopup text='Submit successfully' type='success' isVisible={true} / \n        );\n    }\n}  Javascript  var notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(notifyPopup.render());\n\nnotifyPopup.show();", 
            "title": "show()"
        }, 
        {
            "location": "/Reference/NotifyPopup/#hide", 
            "text": "Hide the notify popup.  Parameter  None  Returns  None   Sample  React  import { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             NotifyPopup text='Submit successfully' type='success' isVisible={false} / \n        );\n    }\n}  Javascript  var notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(notifyPopup.render());\n\nnotifyPopup.hide();", 
            "title": "hide()"
        }, 
        {
            "location": "/Reference/NotifyPopup/#disable", 
            "text": "Disabled the notify popup.  Parameter  None  Returns  None   Sample  React  import { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             NotifyPopup text='Submit successfully' type='success' isDisabled={true} / \n        );\n    }\n}  Javascript  var notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(notifyPopup.render());\n\nnotifyPopup.disable();", 
            "title": "disable()"
        }, 
        {
            "location": "/Reference/NotifyPopup/#enable", 
            "text": "Enabled the notify popup.  Parameter  None  Returns  None   Sample  React  import { NotifyPopup } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             NotifyPopup text='Submit successfully' type='success' isDisabled={false} / \n        );\n    }\n}  Javascript  var notifyPopup = new kintoneUIComponent.NotifyPopup({\n    text: 'Submit sucessffully',\n    type: 'success'\n});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(notifyPopup.render());\n\nnotifyPopup.enable();", 
            "title": "enable()"
        }, 
        {
            "location": "/Reference/RadioButton/", 
            "text": "RadioButton\n\n\nOverview\n\n\n\n\n\n\n\n\n\n\nNumber\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nTitle\n\n\n\n\n\n\n2\n\n\nIcon when item is selected\n\n\n\n\n\n\n3\n\n\nValue of item\n\n\n\n\n\n\n4\n\n\nIcon when item isn't selected\n\n\n\n\n\n\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nNo\n\n\nThe object contains params of constructor.\n\n\n\n\n\n\noptions.name\n\n\nString\n\n\nYes\n\n\nName of radio button for submit.\n If value isn't set, the error message will be displayed.\n\n\n\n\n\n\noptions.items\n\n\nArray\nObject\n\n\nNo\n\n\nList of item which displayed in radio button.\n\n\n\n\n\n\noptions.items[].value\n\n\nString\n\n\nYes\n\n\nThe value of an item.If the value is duplicate, the error will be displayed\n\n\n\n\n\n\noptions.items[].label\n\n\nString\n\n\nNo\n\n\nDisplay string.\n\n\n\n\n\n\noptions.items[].isDisabled\n\n\nBoolean\n\n\nNo\n\n\nIndicate item will be disabled when display. Default value is false.\n\n\n\n\n\n\noptions.value\n\n\nString\n\n\nNo\n\n\nDefault selected item.\n\n\n\n\n\n\noptions.isDisabled\n\n\nBoolean\n\n\nNo\n\n\nThe radio button will be disabled. \n Default value: 'false'\n\n\n\n\n\n\noptions.isVisible\n\n\nBoolean\n\n\nNo\n\n\nThe radio button will be visible. \n Default value: 'true'\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(props) {\n        super(props);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items, value: 'Lemon'};\n    }\n    render() {\n        return (\n            \nRadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n        );\n    }\n}\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n     name: \nfruit\n,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\n\n\n\n\n\nMethods\n\n\nrender()\n\n\nGet dom element of component.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nDom element\n\n\n\n\nSample\n\n\nReact\n\n\nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(props) {\n        super(props);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items, value: 'Lemon'};\n    }\n    render() {\n        return (\n            \nRadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n        );\n    }\n}\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n     name: \nfruit\n,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(radioBtn.render());\n\n\n\n\n\n\naddItem(item)\n\n\nAdd an item to end of the radio button list.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nitem\n\n\nObject\n\n\nYes\n\n\nThe item object will be added.\n\n\n\n\n\n\nitem.value\n\n\nString\n\n\nYes\n\n\nThe value of an item.\n\n\n\n\n\n\nitem.label\n\n\nString\n\n\nNo\n\n\nDisplay string.\n\n\n\n\n\n\nitem.isDisabled\n\n\nBoolean\n\n\nNo\n\n\nIndicate item will be disabled when display.\nDefault value: 'false'\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\n\nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: [],\n            value: undefined\n        }\n    }\n\n    render() {\n        return (\n         \ndiv\n\n          \nRadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nAdd Item\n/button\n\n         \n/div\n\n       );\n    }\n\n    handleClick = () =\n {\n      const item = {\n        label: 'Lemon',\n        value: 'Lemon',\n        isDisabled: false\n      };\n      this.setState(prevState =\n ({\n        items: prevState.items ? prevState.items.concat([item]) : [item]\n      }))\n    }\n}\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n     name: \nfruit\n,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.addItem({label: 'Lemon', value: 'Lemon', isDisabled: true});\n\n\n\n\n\n\nremoveItem(index)\n\n\nRemove item at specific index of radio button list.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nindex\n\n\nInteger\n\n\nYes\n\n\nThe index of remove item.\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: [{\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            }]\n        }\n    }\n\n    render() {\n        return (\n         \ndiv\n\n          \nRadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nRemove Item\n/button\n\n         \n/div\n\n       );\n    }\n\n    handleClick = () =\n {\n      this.setState(prevState =\n {\n        if (prevState.items) {\n            return prevState.items.splice(0, 1);\n        }\n        return prevState;\n      });\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n     name: \nfruit\n,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.removeItem(0);\n\n\n\n\n\n\ngetItems()\n\n\nGet all items in radio button list.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nThe list contains all items of dropdown.\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nitems\n\n\nList\nObject\n\n\nList of items objects in dropdown.\n\n\n\n\n\n\nitems[].label\n\n\nString\n\n\nDisplay string.\n\n\n\n\n\n\nitems[].value\n\n\nString\n\n\nThe value of an item.\n\n\n\n\n\n\nitems[].isDisabled\n\n\nBoolean\n\n\nIndicate item was disabled.\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { DropDown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n         \ndiv\n\n          \nRadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nGet Items\n/button\n\n         \n/div\n\n       );\n    }\n\n    handleClick = () =\n {\n        this.state.items.forEach(item =\n {\n            console.log(item);\n        });\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n     name: \nfruit\n,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(radioBtn.render());\n\nvar items = radioBtn.getItems();\nitems.forEach(function(item) {\n    console.log(item);\n});\n\n\n\n\n\n\ngetValue()\n\n\nGet the selected item in radio button.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nThe value of the selected item\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\n\nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n         \ndiv\n\n          \nRadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nGet Value\n/button\n\n         \n/div\n\n       );\n    }\n\n    handleClick = () =\n {\n        console.log(this.state.value);\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n     name: \nfruit\n,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.getValue();\n\n\n\n\n\n\nsetValue(value)\n\n\nSet the selected item for radio button.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nYes\n\n\nSelected value in radio button.\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n         \ndiv\n\n          \nRadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nSet Value\n/button\n\n         \n/div\n\n       );\n    }\n\n    handleClick = () =\n {\n        this.setState({value: 'Orange'});\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n     name: \nfruit\n,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.setValue('Lemon');\n\n\n\n\n\n\ndisableItem(value)\n\n\nSet the disabled item for the radio button.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nYes\n\n\nThe value of an item in radio button.\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n   render() {\n        return (\n         \ndiv\n\n          \nRadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nDisabled Item\n/button\n\n         \n/div\n\n       );\n    }\n\n    handleClick = () =\n {\n        const items = [...this.state.items];\n        items[0].isDisabled = true;\n\n        this.setState({ items: items });\n    }\n}\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n     name: \nfruit\n,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.disableItem('Orange');\n\n\n\n\n\n\nenableItem(value)\n\n\nSet the enabled item for radio button.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nYes\n\n\nSelected value in radio button.\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n       var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n         \ndiv\n\n          \nRadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nEnabled Item\n/button\n\n         \n/div\n\n       );\n    }\n\n    handleClick = () =\n {\n        const items = [...this.state.items];\n        items[1].isDisabled = false;\n\n        this.setState({ items: items });\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n     name: \nfruit\n,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.enableItem('Banana');\n\n\n\n\n\n\non(eventName, callBack)\n\n\nRegister callback for change event\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neventName\n\n\nString\n\n\nYes\n\n\nName of event: \n'change'\n\n\n\n\n\n\ncallback\n\n\nfunction\n\n\nYes\n\n\ncallback\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n       var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n            \nRadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange } /\n\n        );\n    }\n        handleChange = (value) =\n {\n            this.setState({value});\n            console.log('value: ' + value);\n        }\n    }\n\n\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n     name: \nfruit\n,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.on('change', function(value) {\n    console.log('on change');\n});\n\n\n\n\n\n\nshow()\n\n\nDisplay the radio button.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n       var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n            \nRadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =\n {this.setState({value});}} isVisible={true} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n     name: \nfruit\n,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.show();\n\n\n\n\n\n\nhide()\n\n\nHide the radio button.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n       var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n            \nRadioButton name='radio' items={this.state.items} value={this.state.value} onChange={() =\n {this.setState({value});}}  isVisible={false} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n     name: \nfruit\n,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.hide();\n\n\n\n\n\n\ndisable()\n\n\nDisabled the radio button.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\n\nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n       var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n            \nRadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange.bind(this)}  isDisabled={true} /\n\n        );\n    }\n    handleChange(value) {\n            this.setState({value});\n        }\n}\n\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n     name: \nfruit\n,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.disable();\n\n\n\n\n\n\nenable()\n\n\nEnabled the radio button.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\n\nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n       var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n            \nRadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange.bind(this)}  isDisabled={false} /\n\n        );\n    }\n    handleChange(value) {\n            this.setState({value});\n        }\n}\n\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n     name: \nfruit\n,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.enable();", 
            "title": "RadioButton"
        }, 
        {
            "location": "/Reference/RadioButton/#radiobutton", 
            "text": "", 
            "title": "RadioButton"
        }, 
        {
            "location": "/Reference/RadioButton/#overview", 
            "text": "Number  Description      1  Title    2  Icon when item is selected    3  Value of item    4  Icon when item isn't selected", 
            "title": "Overview"
        }, 
        {
            "location": "/Reference/RadioButton/#constructor", 
            "text": "Parameter     Name  Type  Required  Description      options  Object  No  The object contains params of constructor.    options.name  String  Yes  Name of radio button for submit.  If value isn't set, the error message will be displayed.    options.items  Array Object  No  List of item which displayed in radio button.    options.items[].value  String  Yes  The value of an item.If the value is duplicate, the error will be displayed    options.items[].label  String  No  Display string.    options.items[].isDisabled  Boolean  No  Indicate item will be disabled when display. Default value is false.    options.value  String  No  Default selected item.    options.isDisabled  Boolean  No  The radio button will be disabled.   Default value: 'false'    options.isVisible  Boolean  No  The radio button will be visible.   Default value: 'true'      Sample  React  import { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(props) {\n        super(props);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items, value: 'Lemon'};\n    }\n    render() {\n        return (\n             RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n        );\n    }\n}  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n     name:  fruit ,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});", 
            "title": "Constructor"
        }, 
        {
            "location": "/Reference/RadioButton/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/Reference/RadioButton/#render", 
            "text": "Get dom element of component.  Parameter  None  Returns  Dom element   Sample  React  import { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(props) {\n        super(props);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items, value: 'Lemon'};\n    }\n    render() {\n        return (\n             RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n        );\n    }\n}  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n     name:  fruit ,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(radioBtn.render());", 
            "title": "render()"
        }, 
        {
            "location": "/Reference/RadioButton/#additemitem", 
            "text": "Add an item to end of the radio button list.  Parameter     Name  Type  Required  Description      item  Object  Yes  The item object will be added.    item.value  String  Yes  The value of an item.    item.label  String  No  Display string.    item.isDisabled  Boolean  No  Indicate item will be disabled when display. Default value: 'false'     Returns  None   Sample  React  \nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: [],\n            value: undefined\n        }\n    }\n\n    render() {\n        return (\n          div \n           RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Add Item /button \n          /div \n       );\n    }\n\n    handleClick = () =  {\n      const item = {\n        label: 'Lemon',\n        value: 'Lemon',\n        isDisabled: false\n      };\n      this.setState(prevState =  ({\n        items: prevState.items ? prevState.items.concat([item]) : [item]\n      }))\n    }\n}  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n     name:  fruit ,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.addItem({label: 'Lemon', value: 'Lemon', isDisabled: true});", 
            "title": "addItem(item)"
        }, 
        {
            "location": "/Reference/RadioButton/#removeitemindex", 
            "text": "Remove item at specific index of radio button list.  Parameter     Name  Type  Required  Description      index  Integer  Yes  The index of remove item.     Returns  None   Sample  React  import { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        this.state = {\n            items: [{\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            }]\n        }\n    }\n\n    render() {\n        return (\n          div \n           RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Remove Item /button \n          /div \n       );\n    }\n\n    handleClick = () =  {\n      this.setState(prevState =  {\n        if (prevState.items) {\n            return prevState.items.splice(0, 1);\n        }\n        return prevState;\n      });\n    }\n}  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n     name:  fruit ,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.removeItem(0);", 
            "title": "removeItem(index)"
        }, 
        {
            "location": "/Reference/RadioButton/#getitems", 
            "text": "Get all items in radio button list.  Parameter  None  Returns  The list contains all items of dropdown.     Name  Type  Description      items  List Object  List of items objects in dropdown.    items[].label  String  Display string.    items[].value  String  The value of an item.    items[].isDisabled  Boolean  Indicate item was disabled.      Sample  React  import { DropDown } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {items: items};\n    }\n\n    render() {\n        return (\n          div \n           RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Get Items /button \n          /div \n       );\n    }\n\n    handleClick = () =  {\n        this.state.items.forEach(item =  {\n            console.log(item);\n        });\n    }\n}  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n     name:  fruit ,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(radioBtn.render());\n\nvar items = radioBtn.getItems();\nitems.forEach(function(item) {\n    console.log(item);\n});", 
            "title": "getItems()"
        }, 
        {
            "location": "/Reference/RadioButton/#getvalue", 
            "text": "Get the selected item in radio button.  Parameter  None  Returns     Name  Type  Description      value  String  The value of the selected item      Sample  React  \nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n          div \n           RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Get Value /button \n          /div \n       );\n    }\n\n    handleClick = () =  {\n        console.log(this.state.value);\n    }\n}  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n     name:  fruit ,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.getValue();", 
            "title": "getValue()"
        }, 
        {
            "location": "/Reference/RadioButton/#setvaluevalue", 
            "text": "Set the selected item for radio button.  Parameter     Name  Type  Required  Description      value  String  Yes  Selected value in radio button.     Returns  None   Sample  React  import { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n          div \n           RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Set Value /button \n          /div \n       );\n    }\n\n    handleClick = () =  {\n        this.setState({value: 'Orange'});\n    }\n}  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n     name:  fruit ,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.setValue('Lemon');", 
            "title": "setValue(value)"
        }, 
        {
            "location": "/Reference/RadioButton/#disableitemvalue", 
            "text": "Set the disabled item for the radio button.  Parameter     Name  Type  Required  Description      value  String  Yes  The value of an item in radio button.     Returns  None   Sample  React  import { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n        var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n   render() {\n        return (\n          div \n           RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Disabled Item /button \n          /div \n       );\n    }\n\n    handleClick = () =  {\n        const items = [...this.state.items];\n        items[0].isDisabled = true;\n\n        this.setState({ items: items });\n    }\n}  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n     name:  fruit ,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.disableItem('Orange');", 
            "title": "disableItem(value)"
        }, 
        {
            "location": "/Reference/RadioButton/#enableitemvalue", 
            "text": "Set the enabled item for radio button.  Parameter     Name  Type  Required  Description      value  String  Yes  Selected value in radio button.     Returns  None   Sample  React  import { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n       var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n          div \n           RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Enabled Item /button \n          /div \n       );\n    }\n\n    handleClick = () =  {\n        const items = [...this.state.items];\n        items[1].isDisabled = false;\n\n        this.setState({ items: items });\n    }\n}  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n     name:  fruit ,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.enableItem('Banana');", 
            "title": "enableItem(value)"
        }, 
        {
            "location": "/Reference/RadioButton/#oneventname-callback", 
            "text": "Register callback for change event  Parameter     Name  Type  Required  Description      eventName  String  Yes  Name of event:  'change'    callback  function  Yes  callback     Returns  None   Sample  React  import { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n       var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n             RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange } / \n        );\n    }\n        handleChange = (value) =  {\n            this.setState({value});\n            console.log('value: ' + value);\n        }\n    }  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n     name:  fruit ,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.on('change', function(value) {\n    console.log('on change');\n});", 
            "title": "on(eventName, callBack)"
        }, 
        {
            "location": "/Reference/RadioButton/#show", 
            "text": "Display the radio button.  Parameter  None  Returns  None   Sample  React  import { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n       var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n             RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={(value) =  {this.setState({value});}} isVisible={true} / \n        );\n    }\n}  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n     name:  fruit ,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.show();", 
            "title": "show()"
        }, 
        {
            "location": "/Reference/RadioButton/#hide", 
            "text": "Hide the radio button.  Parameter  None  Returns  None   Sample  React  import { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n       var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n             RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={() =  {this.setState({value});}}  isVisible={false} / \n        );\n    }\n}  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n     name:  fruit ,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.hide();", 
            "title": "hide()"
        }, 
        {
            "location": "/Reference/RadioButton/#disable", 
            "text": "Disabled the radio button.  Parameter  None  Returns  None   Sample  React  \nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n       var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n             RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange.bind(this)}  isDisabled={true} / \n        );\n    }\n    handleChange(value) {\n            this.setState({value});\n        }\n}  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n     name:  fruit ,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.disable();", 
            "title": "disable()"
        }, 
        {
            "location": "/Reference/RadioButton/#enable", 
            "text": "Enabled the radio button.  Parameter  None  Returns  None   Sample  React  \nimport { RadioButton } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    constructor(opts) {\n        super(opts);\n       var items = [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ];\n        this.state = {\n            items: items,\n            value: 'Banana'\n        };\n    }\n\n    render() {\n        return (\n             RadioButton name='radio' items={this.state.items} value={this.state.value} onChange={this.handleChange.bind(this)}  isDisabled={false} / \n        );\n    }\n    handleChange(value) {\n            this.setState({value});\n        }\n}  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n     name:  fruit ,\n     items: [\n            {\n                label: 'Orange',\n                value: 'Orange',\n                isDisabled: false\n            },\n            {\n                label: 'Banana',\n                value: 'Banana',\n                isDisabled: true\n            },\n            {\n                label: 'Lemon',\n                value: 'Lemon',\n                isDisabled: true\n            },\n        ],\n    value: 'Banana'\n});\n\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(radioBtn.render());\n\nradioBtn.enable();", 
            "title": "enable()"
        }, 
        {
            "location": "/Reference/Spinner/", 
            "text": "Spinner\n\n\nOverview\n\n\n\n\nConstructor\n\n\nParameter\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Spinner } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nSpinner isVisible={true}/\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar spinner = new kintoneUIComponent.Spinner();\n\n\n\n\n\n\nMethods\n\n\nrender()\n\n\nGet dom element of component.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nDom element\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Spinner } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nSpinner isVisible={true}/\n\n        );\n    }\n}\n\n\n\n\nJavascript\n\n\nvar spinner = new kintoneUIComponent.Spinner();\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(spinner.render());\n\n\n\n\n\n\nshow()\n\n\nDisplay the spinner.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Spinner } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nSpinner isVisible={true}/\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar spinner = new kintoneUIComponent.Spinner();\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(spinner.render());\nspinner.show();\n\n\n\n\n\n\nhide()\n\n\nHide the spinner.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Spinner } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n            \nSpinner isVisible={false}/\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar spinner = new kintoneUIComponent.Spinner();\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(spinner.render());\nspinner.hide();", 
            "title": "Spinner"
        }, 
        {
            "location": "/Reference/Spinner/#spinner", 
            "text": "", 
            "title": "Spinner"
        }, 
        {
            "location": "/Reference/Spinner/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/Reference/Spinner/#constructor", 
            "text": "Parameter  None   Sample  React  import { Spinner } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Spinner isVisible={true}/ \n        );\n    }\n}  Javascript  var spinner = new kintoneUIComponent.Spinner();", 
            "title": "Constructor"
        }, 
        {
            "location": "/Reference/Spinner/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/Reference/Spinner/#render", 
            "text": "Get dom element of component.  Parameter  None  Returns  Dom element   Sample  React  import { Spinner } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Spinner isVisible={true}/ \n        );\n    }\n}  Javascript  var spinner = new kintoneUIComponent.Spinner();\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(spinner.render());", 
            "title": "render()"
        }, 
        {
            "location": "/Reference/Spinner/#show", 
            "text": "Display the spinner.  Parameter  None  Returns  None   Sample  React  import { Spinner } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Spinner isVisible={true}/ \n        );\n    }\n}  Javascript  var spinner = new kintoneUIComponent.Spinner();\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(spinner.render());\nspinner.show();", 
            "title": "show()"
        }, 
        {
            "location": "/Reference/Spinner/#hide", 
            "text": "Hide the spinner.  Parameter  None  Returns  None   Sample  React  import { Spinner } from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    render() {\n        return (\n             Spinner isVisible={false}/ \n        );\n    }\n}  Javascript  var spinner = new kintoneUIComponent.Spinner();\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(spinner.render());\nspinner.hide();", 
            "title": "hide()"
        }, 
        {
            "location": "/Reference/Table/", 
            "text": "Table\n\n\nOverview\n\n\n\n\n\n\n\n\n\n\nNumber\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n1\n\n\nHeader of column\n\n\n\n\n\n\n2\n\n\nIcon button for insert row\n\n\n\n\n\n\n3\n\n\nIcon button for remove row\n\n\n\n\n\n\n4\n\n\nChild control component\n\n\n\n\n\n\n5\n\n\nSample row\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nBelow is the list components that table supports:\n\nText\n\n\nDropdown\n\n\nCheckBox\n\n\nMultipleChoice\n\n\nRadioButton\n\n\nLabel\n\n\nIconButton\n\n\nAlert\n\n\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nYes\n\n\nThe object contains params of constructor.\n\n\n\n\n\n\noptions.template\n\n\nTableRow\n\n\nYes\n\n\nThe row template.\n\n\n\n\n\n\noptions.header\n\n\nArray\n\n\nYes\n\n\nHeader content for the table.\n\n\n\n\n\n\noptions.value\n\n\nArray\n\n\nNo\n\n\nValue for table. \n Refer to the \ngetValue()\n and \nsetValue(value)\n for more information\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport React, { Component } from 'react';\nimport { Table, RadioButton, Dropdown, Button, IconButton} from 'kintone-ui-component';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const fruit = [\n          {\n            label: 'Orange',\n            value: 'orange'\n          },\n          {\n            label: 'Banana',\n            value: 'banana'\n          }\n        ];\n\n    const color = [\n      {\n        label: 'Red',\n        value: 'red'\n      },\n      {\n        label: 'Green',\n        value: 'green'\n      }\n    ];\n    this.state = {\n      fruit: fruit,\n      table: {\n        header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'],\n        rowTemplate: [\n          \nRadioButton name=\nfruit\n items={fruit} value={fruit.value} isVisible={true} isDisabled={false} /\n,\n          \nDropdown items={color} isVisible={true} isDisabled={false} /\n,\n          \nButton text=\nbutton\n isVisible={true} isDisabled={false} /\n,\n          \nIconButton /\n\n        ]\n      }\n    }\n  }\n\n  handleRowAdd = (data) =\n {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n  handleRowRemove = (data) =\n {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellChange = (data) =\n {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellClick = (data) =\n {\n    console.log('data: ', data);\n  }\n\n  render() {\n    return (\n      \ndiv\n\n        \nTable header={this.state.table.header} rowTemplate={this.state.table.rowTemplate}\n          value={this.state.table.value} isVisible={true}\n          onCellChange={this.handleCellChange}\n          onRowAdd={this.handleRowAdd}\n          onRowRemove={this.handleRowRemove}\n          onCellClick={this.handleCellClick}\n        /\n\n      \n/div\n\n    );\n  }\n}\n\n\n\n\nJavascript\n\n\nconst radioBtn = new kintoneUIComponent.RadioButton({\n    items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}],\n    value: 'orange',\n    name: 'Fruit'\n});\n\nconst dropdown = new kintoneUIComponent.Dropdown({\n    items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}],\n    value: 'green'\n})\n\nvar table = new kintoneUIComponent.Table({\n    rowTemplate: [radioBtn, dropdown],\n    header: ['Fruit', 'Color']\n});\n\n\n\n\n\n\nMethods\n\n\nrender()\n\n\nGet dom element of component.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nDom element\n\n\n\n\nSample\n\n\nReact\n\n\nimport React, { Component } from 'react';\nimport { Table, RadioButton, Dropdown, Button, IconButton} from 'kintone-ui-component';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const fruit = [\n          {\n            label: 'Orange',\n            value: 'orange'\n          },\n          {\n            label: 'Banana',\n            value: 'banana'\n          }\n        ];\n\n    const color = [\n      {\n        label: 'Red',\n        value: 'red'\n      },\n      {\n        label: 'Green',\n        value: 'green'\n      }\n    ];\n    this.state = {\n      fruit: fruit,\n      table: {\n        header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'],\n        rowTemplate: [\n          \nRadioButton name=\nfruit\n items={fruit} value={fruit.value} isVisible={true} isDisabled={false} /\n,\n          \nDropdown items={color} isVisible={true} isDisabled={false} /\n,\n          \nButton text=\nbutton\n isVisible={true} isDisabled={false} /\n,\n          \nIconButton /\n\n        ]\n      }\n    }\n  }\n\n  handleRowAdd = (data) =\n {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n  handleRowRemove = (data) =\n {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellChange = (data) =\n {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellClick = (data) =\n {\n    console.log('data: ', data);\n  }\n\n  render() {\n    return (\n      \ndiv\n\n        \nTable header={this.state.table.header} rowTemplate={this.state.table.rowTemplate}\n          value={this.state.table.value} isVisible={true}\n          onCellChange={this.handleCellChange}\n          onRowAdd={this.handleRowAdd}\n          onRowRemove={this.handleRowRemove}\n          onCellClick={this.handleCellClick}\n        /\n\n      \n/div\n\n    );\n  }\n}\n\n\n\n\nJavascript\n\n\nconst radioBtn = new kintoneUIComponent.RadioButton({\n    items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}],\n    value: 'orange',\n    name: 'Fruit'\n});\n\nconst dropdown = new kintoneUIComponent.Dropdown({\n    items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}],\n    value: 'green'\n})\n\nvar table = new kintoneUIComponent.Table({\n    rowTemplate: [radioBtn, dropdown],\n    header: ['Fruit', 'Color']\n});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(table.render());\n\n\n\n\n\n\ngetValue()\n\n\nGet value of all rows in the table.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nArray\n\n\nValue of all rows in the table\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport React, { Component } from 'react';\nimport { Table, RadioButton, Dropdown, Button, IconButton} from 'kintone-ui-component';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const fruit = [\n          {\n            label: 'Orange',\n            value: 'orange'\n          },\n          {\n            label: 'Banana',\n            value: 'banana'\n          }\n        ];\n\n    const color = [\n      {\n        label: 'Red',\n        value: 'red'\n      },\n      {\n        label: 'Green',\n        value: 'green'\n      }\n    ];\n    this.state = {\n      fruit: fruit,\n      table: {\n        header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'],\n        rowTemplate: [\n          \nRadioButton name=\nfruit\n items={fruit} value={fruit.value} isVisible={true} isDisabled={false} /\n,\n          \nDropdown items={color} isVisible={true} isDisabled={false} /\n,\n          \nButton text=\nbutton\n isVisible={true} isDisabled={false} /\n,\n          \nIconButton /\n\n        ]\n      }\n    }\n  }\n\n  handleRowAdd = (data) =\n {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n  handleRowRemove = (data) =\n {\n    const table = this.state.table;\n    table.value = data;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellChange = (data) =\n {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellClick = (data) =\n {\n    console.log('data: ', data);\n  }\n\n  render() {\n    return (\n      \ndiv\n\n        \nTable header={this.state.table.header} rowTemplate={this.state.table.rowTemplate}\n          value={this.state.table.value} isVisible={true}\n          onCellChange={this.handleCellChange}\n          onRowAdd={this.handleRowAdd}\n          onRowRemove={this.handleRowRemove}\n          onCellClick={this.handleCellClick}\n        /\n\n       \nButton text=\nget value\n onClick={() =\n {console.log('value: ', this.state.table.value)}} /\n\n      \n/div\n\n    );\n  }\n}\n\n\n\n\nJavascript\n\n\nconst radioBtn = new kintoneUIComponent.RadioButton({\n    items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}],\n    value: 'orange',\n    name: 'Fruit'\n});\n\nconst dropdown = new kintoneUIComponent.Dropdown({\n    items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}],\n    value: 'green'\n})\n\nvar table = new kintoneUIComponent.Table({\n    rowTemplate: [radioBtn, dropdown],\n    header: ['Fruit', 'Color']\n});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(table.render());\n\nvar value = table.getValue();\nvalue.forEach(rowData =\n {\n    rowData.forEach(cellData =\n {\n        console.log(cellData)\n    });\n});\n\n\n\n\n\n\nsetValue(value)\n\n\nSet value for every row in table. The number of rows in table's dependent on the length on this parameters. \n\n\n\n\nNote\n\n\nBelow is the list components that this function supports:\n\nText\n\n\nDropdown\n\n\nCheckBox\n\n\nMultipleChoice\n\n\nRadioButton\n\n\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nArray\n\n\nYes\n\n\nValue for every row in table\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\n\nimport { Alert, NotifyPopup, RadioButton, Text, CheckBox, Button, Dropdown, MultipleChoice, Label, Table, IconButton } from 'kintone-ui-component';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const fruit = [\n          {\n            label: 'Orange',\n            value: 'orange'\n          },\n          {\n            label: 'Banana',\n            value: 'banana'\n          }\n        ];\n\n    const color = [\n      {\n        label: 'Red',\n        value: 'red'\n      },\n      {\n        label: 'Green',\n        value: 'green'\n      }\n    ];\n    this.state = {\n      fruit: fruit,\n      table: {\n        header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'],\n        rowTemplate: [\n          \nRadioButton name=\nfruit\n items={fruit} value={fruit.value} isVisible={true} isDisabled={false} /\n,\n          \nDropdown items={color} isVisible={true} isDisabled={false} /\n,\n          \nButton text=\nbutton\n isVisible={true} isDisabled={false} /\n,\n          \nIconButton /\n\n        ]\n      }\n    }\n  }\n\n  render() {\n    return (\n      \ndiv\n\n        \nTable header={this.state.table.header} rowTemplate={this.state.table.rowTemplate}\n          value={this.state.table.value} isVisible={true}\n        /\n\n        \nButton text=\nSet value\n onClick={() =\n {const table = this.state.table; table.value = [['orange','red']]; this.setState({table: table})}}/\n\n      \n/div\n\n    );\n  }\n}\n\n\n\n\nJavascript\n\n\nconst radioBtn = new kintoneUIComponent.RadioButton({\n    items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}],\n    value: 'orange',\n    name: 'Fruit'\n});\n\nconst dropdown = new kintoneUIComponent.Dropdown({\n    items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}],\n    value: 'green'\n})\n\nvar table = new kintoneUIComponent.Table({\n    rowTemplate: [radioBtn, dropdown],\n    header: ['Fruit', 'Color']\n});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(table.render());\n\ntable.setValue([\n    ['orange', 'green'],\n    ['orange', 'red'],\n    ['banana', 'green'],\n    ['banana', 'red']\n]);\n\n\n\n\n\n\non(eventName, callBack)\n\n\nRegister callback for a event\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neventName\n\n\nString\n\n\nYes\n\n\nName of events: \n'rowAdd' \nThe 'rowAdd' event occurs when adding a new row in the table \n \n'rowRemove'\nThe 'rowRemove' event occurs when removing a row in the table\n \n \n'cellChange'\nThe 'cellChange' event occurs when the value of an element bellow has been changed:\nText\nDrodown\nRadioButton\nMultipleChoice\nCheckBox\n \n \n'cellClick\nThe 'cellClick' event occurs when the value of an element bellow has been clicked:\nButton\nIconButton\nLabel\nAlert\n \n\n\n\n\n\n\ncallback\n\n\nfunction\n\n\nYes\n\n\ncallback\n\n\n\n\n\n\n\n\nReturns\n\n\nCallback data\n\n\n\n\n\n\n\n\nEvent\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrowAdd\n\n\ndata\n\n\nObject\n\n\nCallback data\n\n\n\n\n\n\n\n\ndata.tableValue\n\n\nArray\n\n\nValues of the table\n\n\n\n\n\n\n\n\ndata.row\n\n\nInterger\n\n\nPosition of the new row in the table\n\n\n\n\n\n\nrowRemove\n\n\ndata\n\n\nobject\n\n\nCallback data\n\n\n\n\n\n\n\n\ndata.tableValue\n\n\nArray\n\n\nValues of the table\n\n\n\n\n\n\ncellChange\n\n\ndata\n\n\nobject\n\n\nCallback data\n\n\n\n\n\n\n\n\ndata.tableValue\n\n\nArray\n\n\nValues of the table\n\n\n\n\n\n\n\n\ndata.cell\n\n\nobject\n\n\nCell of the component which has been changed the values in the table\n\n\n\n\n\n\n\n\ndata.cell.row\n\n\nInterger\n\n\nRow specification of the object cell\n\n\n\n\n\n\n\n\ndata.cell.column\n\n\nInterger\n\n\nColumn specification of the object cell\n\n\n\n\n\n\ncellClick\n\n\ndata\n\n\nobject\n\n\nCallback data\n\n\n\n\n\n\n\n\ndata.tableValue\n\n\nArray\n\n\nValues of the table\n\n\n\n\n\n\n\n\ndata.cell\n\n\nobject\n\n\nCell of the component which has been clicked in the table\n\n\n\n\n\n\n\n\ndata.cell.row\n\n\nInterger\n\n\nRow specification of the object cell\n\n\n\n\n\n\n\n\ndata.cell.column\n\n\nInterger\n\n\nColumn specification of the object cell\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport React, { Component } from 'react';\nimport { Table, RadioButton, Dropdown, Button, IconButton} from 'kintone-ui-component';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const fruit = [\n          {\n            label: 'Orange',\n            value: 'orange'\n          },\n          {\n            label: 'Banana',\n            value: 'banana'\n          }\n        ];\n\n    const color = [\n      {\n        label: 'Red',\n        value: 'red'\n      },\n      {\n        label: 'Green',\n        value: 'green'\n      }\n    ];\n    this.state = {\n      fruit: fruit,\n      table: {\n        header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'],\n        rowTemplate: [\n          \nRadioButton name=\nfruit\n items={fruit} value={fruit.value} isVisible={true} isDisabled={false} /\n,\n          \nDropdown items={color} isVisible={true} isDisabled={false} /\n,\n          \nButton text=\nbutton\n isVisible={true} isDisabled={false} /\n,\n          \nIconButton /\n\n        ]\n      }\n    }\n  }\n\n  handleRowAdd = (data) =\n {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n  handleRowRemove = (data) =\n {\n    const table = this.state.table;\n    table.value = data;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellChange = (data) =\n {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellClick = (data) =\n {\n    console.log('data: ', data);\n  }\n\n  render() {\n    return (\n      \ndiv\n\n        \nTable header={this.state.table.header} rowTemplate={this.state.table.rowTemplate}\n          value={this.state.table.value} isVisible={true}\n          onCellChange={this.handleCellChange}\n          onRowAdd={this.handleRowAdd}\n          onRowRemove={this.handleRowRemove}\n          onCellClick={this.handleCellClick}\n        /\n\n      \n/div\n\n    );\n  }\n}\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n    items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}],\n    value: 'orange',\n    name: 'Fruit'\n});\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}],\n    value: 'green'\n})\n\nvar table = new kintoneUIComponent.Table({\n    rowTemplate: [radioBtn, dropdown],\n    header: ['Fruit', 'Color']\n});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(table.render());\n\ntable.on('rowRemove', function(data) {\n    console.log(data);\n})\ntable.on('rowAdd', function(data) {\n    console.log(data);\n})\ntable.on('cellChange', function(data) {\n    console.log(data);\n})\ntable.on('cellClick', function(data) {\n    console.log(data);\n})\n\n\n\n\n\n\nshow()\n\n\nDisplayed the table\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\n\nimport { Alert, NotifyPopup, RadioButton, Text, CheckBox, Button, Dropdown, MultipleChoice, Label, Table, IconButton } from 'kintone-ui-component';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const fruit = [\n          {\n            label: 'Orange',\n            value: 'orange'\n          },\n          {\n            label: 'Banana',\n            value: 'banana'\n          }\n        ];\n\n    const color = [\n      {\n        label: 'Red',\n        value: 'red'\n      },\n      {\n        label: 'Green',\n        value: 'green'\n      }\n    ];\n    this.state = {\n      fruit: fruit,\n      table: {\n        header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'],\n        rowTemplate: [\n          \nRadioButton name=\nfruit\n items={fruit} value={fruit.value} isVisible={true} isDisabled={false} /\n,\n          \nDropdown items={color} isVisible={true} isDisabled={false} /\n,\n          \nButton text=\nbutton\n isVisible={true} isDisabled={false} /\n,\n          \nIconButton /\n\n        ],\n        isVisible: false\n      }\n    }\n  }\n\n  handleRowAdd = (data) =\n {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n  handleRowRemove = (data) =\n {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handlCellChange = (data) =\n {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellClick = (data) =\n {\n    console.log('data: ', data);\n  }\n\n  render() {\n    return (\n      \ndiv\n\n        \nTable header={this.state.table.header} rowTemplate={this.state.table.rowTemplate}\n          value={this.state.table.value} isVisible={this.state.table.isVisible}\n          onCellChange={this.handlCellChange}\n          onRowAdd={this.handleRowAdd}\n          onRowRemove={this.handleRowRemove}\n          onCellClick={this.handleCellClick}\n        /\n\n        \nButton text=\nshow\n onClick={() =\n {\n          const table = this.state.table; \n          table.isVisible = true; \n          this.setState({table: table});\n          }} /\n\n      \n/div\n\n    );\n  }\n}\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n    items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}],\n    value: 'orange',\n    name: 'Fruit'\n});\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}],\n    value: 'green'\n})\n\nvar table = new kintoneUIComponent.Table({\n    rowTemplate: [radioBtn, dropdown],\n    header: ['Fruit', 'Color'],\n    isVisible: false\n});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(table.render());\n\ntable.show();\n\n\n\n\n\n\nhide()\n\n\nHide the table\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\n\nimport { Alert, NotifyPopup, RadioButton, Text, CheckBox, Button, Dropdown, MultipleChoice, Label, Table, IconButton } from 'kintone-ui-component';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const fruit = [\n          {\n            label: 'Orange',\n            value: 'orange'\n          },\n          {\n            label: 'Banana',\n            value: 'banana'\n          }\n        ];\n\n    const color = [\n      {\n        label: 'Red',\n        value: 'red'\n      },\n      {\n        label: 'Green',\n        value: 'green'\n      }\n    ];\n    this.state = {\n      fruit: fruit,\n      table: {\n        header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'],\n        rowTemplate: [\n          \nRadioButton name=\nfruit\n items={fruit} value={fruit.value} isVisible={true} isDisabled={false} /\n,\n          \nDropdown items={color} isVisible={true} isDisabled={false} /\n,\n          \nButton text=\nbutton\n isVisible={true} isDisabled={false} /\n,\n          \nIconButton /\n\n        ],\n        isVisible: true\n      }\n    }\n  }\n\n  handleRowAdd = (data) =\n {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n  handleRowRemove = (data) =\n {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handlCellChange = (data) =\n {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellClick = (data) =\n {\n    console.log('data: ', data);\n  }\n\n  render() {\n    return (\n      \ndiv\n\n        \nTable header={this.state.table.header} rowTemplate={this.state.table.rowTemplate}\n          value={this.state.table.value} isVisible={this.state.table.isVisible}\n          onCellChange={this.handlCellChange}\n          onRowAdd={this.handleRowAdd}\n          onRowRemove={this.handleRowRemove}\n          onCellClick={this.handleCellClick}\n        /\n\n        \nButton text=\nhide\n onClick={() =\n {\n          const table = this.state.table; \n          table.isVisible = false; \n          this.setState({table: table});\n          }} /\n\n      \n/div\n\n    );\n  }\n}\n\n\n\n\nJavascript\n\n\nvar radioBtn = new kintoneUIComponent.RadioButton({\n    items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}],\n    value: 'orange',\n    name: 'Fruit'\n});\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}],\n    value: 'green'\n})\n\nvar table = new kintoneUIComponent.Table({\n    rowTemplate: [radioBtn, dropdown],\n    header: ['Fruit', 'Color']\n});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(table.render());\n\ntable.hide();", 
            "title": "Table"
        }, 
        {
            "location": "/Reference/Table/#table", 
            "text": "", 
            "title": "Table"
        }, 
        {
            "location": "/Reference/Table/#overview", 
            "text": "Number  Description      1  Header of column    2  Icon button for insert row    3  Icon button for remove row    4  Child control component    5  Sample row      Note  Below is the list components that table supports: Text  Dropdown  CheckBox  MultipleChoice  RadioButton  Label  IconButton  Alert", 
            "title": "Overview"
        }, 
        {
            "location": "/Reference/Table/#constructor", 
            "text": "Parameter     Name  Type  Required  Description      options  Object  Yes  The object contains params of constructor.    options.template  TableRow  Yes  The row template.    options.header  Array  Yes  Header content for the table.    options.value  Array  No  Value for table.   Refer to the  getValue()  and  setValue(value)  for more information      Sample  React  import React, { Component } from 'react';\nimport { Table, RadioButton, Dropdown, Button, IconButton} from 'kintone-ui-component';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const fruit = [\n          {\n            label: 'Orange',\n            value: 'orange'\n          },\n          {\n            label: 'Banana',\n            value: 'banana'\n          }\n        ];\n\n    const color = [\n      {\n        label: 'Red',\n        value: 'red'\n      },\n      {\n        label: 'Green',\n        value: 'green'\n      }\n    ];\n    this.state = {\n      fruit: fruit,\n      table: {\n        header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'],\n        rowTemplate: [\n           RadioButton name= fruit  items={fruit} value={fruit.value} isVisible={true} isDisabled={false} / ,\n           Dropdown items={color} isVisible={true} isDisabled={false} / ,\n           Button text= button  isVisible={true} isDisabled={false} / ,\n           IconButton / \n        ]\n      }\n    }\n  }\n\n  handleRowAdd = (data) =  {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n  handleRowRemove = (data) =  {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellChange = (data) =  {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellClick = (data) =  {\n    console.log('data: ', data);\n  }\n\n  render() {\n    return (\n       div \n         Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate}\n          value={this.state.table.value} isVisible={true}\n          onCellChange={this.handleCellChange}\n          onRowAdd={this.handleRowAdd}\n          onRowRemove={this.handleRowRemove}\n          onCellClick={this.handleCellClick}\n        / \n       /div \n    );\n  }\n}  Javascript  const radioBtn = new kintoneUIComponent.RadioButton({\n    items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}],\n    value: 'orange',\n    name: 'Fruit'\n});\n\nconst dropdown = new kintoneUIComponent.Dropdown({\n    items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}],\n    value: 'green'\n})\n\nvar table = new kintoneUIComponent.Table({\n    rowTemplate: [radioBtn, dropdown],\n    header: ['Fruit', 'Color']\n});", 
            "title": "Constructor"
        }, 
        {
            "location": "/Reference/Table/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/Reference/Table/#render", 
            "text": "Get dom element of component.  Parameter  None  Returns  Dom element   Sample  React  import React, { Component } from 'react';\nimport { Table, RadioButton, Dropdown, Button, IconButton} from 'kintone-ui-component';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const fruit = [\n          {\n            label: 'Orange',\n            value: 'orange'\n          },\n          {\n            label: 'Banana',\n            value: 'banana'\n          }\n        ];\n\n    const color = [\n      {\n        label: 'Red',\n        value: 'red'\n      },\n      {\n        label: 'Green',\n        value: 'green'\n      }\n    ];\n    this.state = {\n      fruit: fruit,\n      table: {\n        header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'],\n        rowTemplate: [\n           RadioButton name= fruit  items={fruit} value={fruit.value} isVisible={true} isDisabled={false} / ,\n           Dropdown items={color} isVisible={true} isDisabled={false} / ,\n           Button text= button  isVisible={true} isDisabled={false} / ,\n           IconButton / \n        ]\n      }\n    }\n  }\n\n  handleRowAdd = (data) =  {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n  handleRowRemove = (data) =  {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellChange = (data) =  {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellClick = (data) =  {\n    console.log('data: ', data);\n  }\n\n  render() {\n    return (\n       div \n         Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate}\n          value={this.state.table.value} isVisible={true}\n          onCellChange={this.handleCellChange}\n          onRowAdd={this.handleRowAdd}\n          onRowRemove={this.handleRowRemove}\n          onCellClick={this.handleCellClick}\n        / \n       /div \n    );\n  }\n}  Javascript  const radioBtn = new kintoneUIComponent.RadioButton({\n    items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}],\n    value: 'orange',\n    name: 'Fruit'\n});\n\nconst dropdown = new kintoneUIComponent.Dropdown({\n    items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}],\n    value: 'green'\n})\n\nvar table = new kintoneUIComponent.Table({\n    rowTemplate: [radioBtn, dropdown],\n    header: ['Fruit', 'Color']\n});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(table.render());", 
            "title": "render()"
        }, 
        {
            "location": "/Reference/Table/#getvalue", 
            "text": "Get value of all rows in the table.  Parameter  None  Returns     Name  Type  Description      value  Array  Value of all rows in the table      Sample  React  import React, { Component } from 'react';\nimport { Table, RadioButton, Dropdown, Button, IconButton} from 'kintone-ui-component';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const fruit = [\n          {\n            label: 'Orange',\n            value: 'orange'\n          },\n          {\n            label: 'Banana',\n            value: 'banana'\n          }\n        ];\n\n    const color = [\n      {\n        label: 'Red',\n        value: 'red'\n      },\n      {\n        label: 'Green',\n        value: 'green'\n      }\n    ];\n    this.state = {\n      fruit: fruit,\n      table: {\n        header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'],\n        rowTemplate: [\n           RadioButton name= fruit  items={fruit} value={fruit.value} isVisible={true} isDisabled={false} / ,\n           Dropdown items={color} isVisible={true} isDisabled={false} / ,\n           Button text= button  isVisible={true} isDisabled={false} / ,\n           IconButton / \n        ]\n      }\n    }\n  }\n\n  handleRowAdd = (data) =  {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n  handleRowRemove = (data) =  {\n    const table = this.state.table;\n    table.value = data;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellChange = (data) =  {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellClick = (data) =  {\n    console.log('data: ', data);\n  }\n\n  render() {\n    return (\n       div \n         Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate}\n          value={this.state.table.value} isVisible={true}\n          onCellChange={this.handleCellChange}\n          onRowAdd={this.handleRowAdd}\n          onRowRemove={this.handleRowRemove}\n          onCellClick={this.handleCellClick}\n        / \n        Button text= get value  onClick={() =  {console.log('value: ', this.state.table.value)}} / \n       /div \n    );\n  }\n}  Javascript  const radioBtn = new kintoneUIComponent.RadioButton({\n    items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}],\n    value: 'orange',\n    name: 'Fruit'\n});\n\nconst dropdown = new kintoneUIComponent.Dropdown({\n    items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}],\n    value: 'green'\n})\n\nvar table = new kintoneUIComponent.Table({\n    rowTemplate: [radioBtn, dropdown],\n    header: ['Fruit', 'Color']\n});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(table.render());\n\nvar value = table.getValue();\nvalue.forEach(rowData =  {\n    rowData.forEach(cellData =  {\n        console.log(cellData)\n    });\n});", 
            "title": "getValue()"
        }, 
        {
            "location": "/Reference/Table/#setvaluevalue", 
            "text": "Set value for every row in table. The number of rows in table's dependent on the length on this parameters.    Note  Below is the list components that this function supports: Text  Dropdown  CheckBox  MultipleChoice  RadioButton   Parameter     Name  Type  Required  Description      value  Array  Yes  Value for every row in table     Returns  None   Sample  React  import ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\n\nimport { Alert, NotifyPopup, RadioButton, Text, CheckBox, Button, Dropdown, MultipleChoice, Label, Table, IconButton } from 'kintone-ui-component';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const fruit = [\n          {\n            label: 'Orange',\n            value: 'orange'\n          },\n          {\n            label: 'Banana',\n            value: 'banana'\n          }\n        ];\n\n    const color = [\n      {\n        label: 'Red',\n        value: 'red'\n      },\n      {\n        label: 'Green',\n        value: 'green'\n      }\n    ];\n    this.state = {\n      fruit: fruit,\n      table: {\n        header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'],\n        rowTemplate: [\n           RadioButton name= fruit  items={fruit} value={fruit.value} isVisible={true} isDisabled={false} / ,\n           Dropdown items={color} isVisible={true} isDisabled={false} / ,\n           Button text= button  isVisible={true} isDisabled={false} / ,\n           IconButton / \n        ]\n      }\n    }\n  }\n\n  render() {\n    return (\n       div \n         Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate}\n          value={this.state.table.value} isVisible={true}\n        / \n         Button text= Set value  onClick={() =  {const table = this.state.table; table.value = [['orange','red']]; this.setState({table: table})}}/ \n       /div \n    );\n  }\n}  Javascript  const radioBtn = new kintoneUIComponent.RadioButton({\n    items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}],\n    value: 'orange',\n    name: 'Fruit'\n});\n\nconst dropdown = new kintoneUIComponent.Dropdown({\n    items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}],\n    value: 'green'\n})\n\nvar table = new kintoneUIComponent.Table({\n    rowTemplate: [radioBtn, dropdown],\n    header: ['Fruit', 'Color']\n});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(table.render());\n\ntable.setValue([\n    ['orange', 'green'],\n    ['orange', 'red'],\n    ['banana', 'green'],\n    ['banana', 'red']\n]);", 
            "title": "setValue(value)"
        }, 
        {
            "location": "/Reference/Table/#oneventname-callback", 
            "text": "Register callback for a event  Parameter     Name  Type  Required  Description      eventName  String  Yes  Name of events:  'rowAdd'  The 'rowAdd' event occurs when adding a new row in the table    'rowRemove' The 'rowRemove' event occurs when removing a row in the table     'cellChange' The 'cellChange' event occurs when the value of an element bellow has been changed: Text Drodown RadioButton MultipleChoice CheckBox     'cellClick The 'cellClick' event occurs when the value of an element bellow has been clicked: Button IconButton Label Alert      callback  function  Yes  callback     Returns  Callback data     Event  Name  Type  Description      rowAdd  data  Object  Callback data     data.tableValue  Array  Values of the table     data.row  Interger  Position of the new row in the table    rowRemove  data  object  Callback data     data.tableValue  Array  Values of the table    cellChange  data  object  Callback data     data.tableValue  Array  Values of the table     data.cell  object  Cell of the component which has been changed the values in the table     data.cell.row  Interger  Row specification of the object cell     data.cell.column  Interger  Column specification of the object cell    cellClick  data  object  Callback data     data.tableValue  Array  Values of the table     data.cell  object  Cell of the component which has been clicked in the table     data.cell.row  Interger  Row specification of the object cell     data.cell.column  Interger  Column specification of the object cell      Sample  React  import React, { Component } from 'react';\nimport { Table, RadioButton, Dropdown, Button, IconButton} from 'kintone-ui-component';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const fruit = [\n          {\n            label: 'Orange',\n            value: 'orange'\n          },\n          {\n            label: 'Banana',\n            value: 'banana'\n          }\n        ];\n\n    const color = [\n      {\n        label: 'Red',\n        value: 'red'\n      },\n      {\n        label: 'Green',\n        value: 'green'\n      }\n    ];\n    this.state = {\n      fruit: fruit,\n      table: {\n        header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'],\n        rowTemplate: [\n           RadioButton name= fruit  items={fruit} value={fruit.value} isVisible={true} isDisabled={false} / ,\n           Dropdown items={color} isVisible={true} isDisabled={false} / ,\n           Button text= button  isVisible={true} isDisabled={false} / ,\n           IconButton / \n        ]\n      }\n    }\n  }\n\n  handleRowAdd = (data) =  {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n  handleRowRemove = (data) =  {\n    const table = this.state.table;\n    table.value = data;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellChange = (data) =  {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellClick = (data) =  {\n    console.log('data: ', data);\n  }\n\n  render() {\n    return (\n       div \n         Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate}\n          value={this.state.table.value} isVisible={true}\n          onCellChange={this.handleCellChange}\n          onRowAdd={this.handleRowAdd}\n          onRowRemove={this.handleRowRemove}\n          onCellClick={this.handleCellClick}\n        / \n       /div \n    );\n  }\n}  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n    items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}],\n    value: 'orange',\n    name: 'Fruit'\n});\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}],\n    value: 'green'\n})\n\nvar table = new kintoneUIComponent.Table({\n    rowTemplate: [radioBtn, dropdown],\n    header: ['Fruit', 'Color']\n});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(table.render());\n\ntable.on('rowRemove', function(data) {\n    console.log(data);\n})\ntable.on('rowAdd', function(data) {\n    console.log(data);\n})\ntable.on('cellChange', function(data) {\n    console.log(data);\n})\ntable.on('cellClick', function(data) {\n    console.log(data);\n})", 
            "title": "on(eventName, callBack)"
        }, 
        {
            "location": "/Reference/Table/#show", 
            "text": "Displayed the table  Parameter  None  Returns  None   Sample  React  import ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\n\nimport { Alert, NotifyPopup, RadioButton, Text, CheckBox, Button, Dropdown, MultipleChoice, Label, Table, IconButton } from 'kintone-ui-component';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const fruit = [\n          {\n            label: 'Orange',\n            value: 'orange'\n          },\n          {\n            label: 'Banana',\n            value: 'banana'\n          }\n        ];\n\n    const color = [\n      {\n        label: 'Red',\n        value: 'red'\n      },\n      {\n        label: 'Green',\n        value: 'green'\n      }\n    ];\n    this.state = {\n      fruit: fruit,\n      table: {\n        header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'],\n        rowTemplate: [\n           RadioButton name= fruit  items={fruit} value={fruit.value} isVisible={true} isDisabled={false} / ,\n           Dropdown items={color} isVisible={true} isDisabled={false} / ,\n           Button text= button  isVisible={true} isDisabled={false} / ,\n           IconButton / \n        ],\n        isVisible: false\n      }\n    }\n  }\n\n  handleRowAdd = (data) =  {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n  handleRowRemove = (data) =  {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handlCellChange = (data) =  {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellClick = (data) =  {\n    console.log('data: ', data);\n  }\n\n  render() {\n    return (\n       div \n         Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate}\n          value={this.state.table.value} isVisible={this.state.table.isVisible}\n          onCellChange={this.handlCellChange}\n          onRowAdd={this.handleRowAdd}\n          onRowRemove={this.handleRowRemove}\n          onCellClick={this.handleCellClick}\n        / \n         Button text= show  onClick={() =  {\n          const table = this.state.table; \n          table.isVisible = true; \n          this.setState({table: table});\n          }} / \n       /div \n    );\n  }\n}  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n    items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}],\n    value: 'orange',\n    name: 'Fruit'\n});\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}],\n    value: 'green'\n})\n\nvar table = new kintoneUIComponent.Table({\n    rowTemplate: [radioBtn, dropdown],\n    header: ['Fruit', 'Color'],\n    isVisible: false\n});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(table.render());\n\ntable.show();", 
            "title": "show()"
        }, 
        {
            "location": "/Reference/Table/#hide", 
            "text": "Hide the table  Parameter  None  Returns  None   Sample  React  import ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\n\nimport { Alert, NotifyPopup, RadioButton, Text, CheckBox, Button, Dropdown, MultipleChoice, Label, Table, IconButton } from 'kintone-ui-component';\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    const fruit = [\n          {\n            label: 'Orange',\n            value: 'orange'\n          },\n          {\n            label: 'Banana',\n            value: 'banana'\n          }\n        ];\n\n    const color = [\n      {\n        label: 'Red',\n        value: 'red'\n      },\n      {\n        label: 'Green',\n        value: 'green'\n      }\n    ];\n    this.state = {\n      fruit: fruit,\n      table: {\n        header: ['Radio', 'Dropdown', 'MultipleChoice', 'Check', 'Alert', 'Label', 'text', 'button', 'icon button'],\n        rowTemplate: [\n           RadioButton name= fruit  items={fruit} value={fruit.value} isVisible={true} isDisabled={false} / ,\n           Dropdown items={color} isVisible={true} isDisabled={false} / ,\n           Button text= button  isVisible={true} isDisabled={false} / ,\n           IconButton / \n        ],\n        isVisible: true\n      }\n    }\n  }\n\n  handleRowAdd = (data) =  {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n  handleRowRemove = (data) =  {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handlCellChange = (data) =  {\n    const table = this.state.table;\n    table.value = data.tableValue;\n    this.setState({ table: table });\n    console.log('data: ', data);\n  }\n\n  handleCellClick = (data) =  {\n    console.log('data: ', data);\n  }\n\n  render() {\n    return (\n       div \n         Table header={this.state.table.header} rowTemplate={this.state.table.rowTemplate}\n          value={this.state.table.value} isVisible={this.state.table.isVisible}\n          onCellChange={this.handlCellChange}\n          onRowAdd={this.handleRowAdd}\n          onRowRemove={this.handleRowRemove}\n          onCellClick={this.handleCellClick}\n        / \n         Button text= hide  onClick={() =  {\n          const table = this.state.table; \n          table.isVisible = false; \n          this.setState({table: table});\n          }} / \n       /div \n    );\n  }\n}  Javascript  var radioBtn = new kintoneUIComponent.RadioButton({\n    items: [{label: 'Orange', value: 'orange'}, {label: 'Banana', value: 'banana'}],\n    value: 'orange',\n    name: 'Fruit'\n});\n\nvar dropdown = new kintoneUIComponent.Dropdown({\n    items: [{label: 'Red', value: 'red'}, {label: 'Green', value: 'green'}],\n    value: 'green'\n})\n\nvar table = new kintoneUIComponent.Table({\n    rowTemplate: [radioBtn, dropdown],\n    header: ['Fruit', 'Color']\n});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(table.render());\n\ntable.hide();", 
            "title": "hide()"
        }, 
        {
            "location": "/Reference/Text/", 
            "text": "Text\n\n\nOverview\n\n\n\n\nConstructor\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noptions\n\n\nObject\n\n\nNo\n\n\nThe object contains params of constructor.\n\n\n\n\n\n\noptions.value\n\n\nString\n\n\nNo\n\n\nThe value of text field.\n\n\n\n\n\n\noptions.isDisabled\n\n\nBoolean\n\n\nNo\n\n\nThe text field will be disabled. \n Default value: 'false'\n\n\n\n\n\n\noptions.isVisible\n\n\nBoolean\n\n\nNo\n\n\nThe text field will be visible. \n Default value: 'true'\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport {Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: ''}\n    render() {\n        return (\n            \nText value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar text= new kintoneUIComponent.Text({value: '12345'});\n\n\n\n\n\n\nMethods\n\n\nrender()\n\n\nGet dom element of component.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nDom element\n\n\n\n\nSample\n\n\nReact\n\n\nimport {Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: ''}\n    render() {\n        return (\n            \nText value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n        );\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar text = new kintoneUIComponent.Text({value: 'input text'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(text.render());\n\n\n\n\n\n\nsetValue(value)\n\n\nSet the value of text field.\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nString\n\n\nYes\n\n\nThe value of text field.\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: '1'}\n\n    render() {\n        return (\n        \ndiv\n\n          \nText value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nClick\n/button\n\n        \n/div\n\n      );\n    }\n    handleClick= () =\n {\n        this.setState({\n            value: 'samp 1'\n        });\n    };\n}\n\n\n\n\n\nJavascript\n\n\nvar text = new kintoneUIComponent.Text({value: 'input text'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(text.render());\n\ntext.setValue('input text');\n\n\n\n\n\n\ngetValue()\n\n\nGet the value of text field.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nString\n\n\nThe value of text field.\n\n\n\n\n\n\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: '1'}\n\n    render() {\n        return (\n        \ndiv\n\n          \nText value={this.state.value} onChange={(value) =\n {this.setState({value})}} /\n\n          \nbutton onClick={this.handleClick}\nClick\n/button\n\n        \n/div\n\n      );\n    }\n    handleClick= () =\n {\n        console.log(this.state.value);\n    };\n}\n\n\n\n\n\nJavascript\n\n\nvar text = new kintoneUIComponent.Text({value: 'input text'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(text.render());\n\ntext.getValue();\n\n\n\n\n\n\non(eventName, callBack)\n\n\nRegister callback for a event of component\n\n\nParameter\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nRequired\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neventName\n\n\nString\n\n\nYes\n\n\nName of event: \n'click'\n'change'\n\n\n\n\n\n\ncallback\n\n\nfunction\n\n\nYes\n\n\ncallback\n\n\n\n\n\n\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: '1'}\n    render() {\n        return (\n            \nText value={this.state.value} onChange={this.handleChange.bind(this)} onClick={() =\n {console.log('click')}} /\n\n        );\n    }\n    handleChange(value) {\n            this.setState({value});\n            console.log('value: ' + value);\n        }\n}\n\n\n\n\n\nJavascript\n\n\nvar text = new kintoneUIComponent.Text({value: 'input text'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(text.render());\n\ntext.on('click', function(event) {\n    console.log('on click');\n});\n\n\n\n\n\n\nshow()\n\n\nDisplay the Text field.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: '1'}\n    render() {\n        return (\n            \nText value={this.state.value} onChange={this.handleChange.bind(this)} isVisible={true} /\n\n        );\n        handleChange(value) {\n            this.setState({value});\n            console.log('value: ' + value);\n        }\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar text = new kintoneUIComponent.Text({value: 'input text'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(text.render());\n\ntext.show();\n\n\n\n\n\n\nhide()\n\n\nHide the Text field.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: '1'}\n    render() {\n        return (\n            \nText value={this.state.value} onChange={this.handleChange.bind(this)} isVisible={false} /\n\n        );\n        handleChange(value) {\n            this.setState({value});\n            console.log('value: ' + value);\n        }\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar text = new kintoneUIComponent.Text({value: 'input text'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(text.render());\n\ntext.hide();\n\n\n\n\n\n\ndisable()\n\n\nDisabled the Text field.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: '1'}\n    render() {\n        return (\n            \nText value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={true} /\n\n        );\n        handleChange(value) {\n            this.setState({value});\n            console.log('value: ' + value);\n        }\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar text = new kintoneUIComponent.Text({value: 'input text'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(text.render());\n\ntext.disable();\n\n\n\n\n\n\nenable()\n\n\nEnabled the Text field.\n\n\nParameter\n\n\nNone\n\n\nReturns\n\n\nNone\n\n\n\n\nSample\n\n\nReact\n\n\nimport { Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: '1'}\n    render() {\n        return (\n            \nText value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={false} /\n\n        );\n        handleChange(value) {\n            this.setState({value});\n            console.log('value: ' + value);\n        }\n    }\n}\n\n\n\n\n\nJavascript\n\n\nvar text = new kintoneUIComponent.Text({value: 'input text'});\nvar body = document.getElementsByTagName(\nBODY\n)[0];\nbody.appendChild(text.render());\n\ntext.enable();", 
            "title": "Text"
        }, 
        {
            "location": "/Reference/Text/#text", 
            "text": "", 
            "title": "Text"
        }, 
        {
            "location": "/Reference/Text/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/Reference/Text/#constructor", 
            "text": "Parameter     Name  Type  Required  Description      options  Object  No  The object contains params of constructor.    options.value  String  No  The value of text field.    options.isDisabled  Boolean  No  The text field will be disabled.   Default value: 'false'    options.isVisible  Boolean  No  The text field will be visible.   Default value: 'true'      Sample  React  import {Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: ''}\n    render() {\n        return (\n             Text value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n        );\n    }\n}  Javascript  var text= new kintoneUIComponent.Text({value: '12345'});", 
            "title": "Constructor"
        }, 
        {
            "location": "/Reference/Text/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/Reference/Text/#render", 
            "text": "Get dom element of component.  Parameter  None  Returns  Dom element   Sample  React  import {Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: ''}\n    render() {\n        return (\n             Text value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n        );\n    }\n}  Javascript  var text = new kintoneUIComponent.Text({value: 'input text'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(text.render());", 
            "title": "render()"
        }, 
        {
            "location": "/Reference/Text/#setvaluevalue", 
            "text": "Set the value of text field.  Parameter     Name  Type  Required  Description      text  String  Yes  The value of text field.     Returns  None   Sample  React  import { Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: '1'}\n\n    render() {\n        return (\n         div \n           Text value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Click /button \n         /div \n      );\n    }\n    handleClick= () =  {\n        this.setState({\n            value: 'samp 1'\n        });\n    };\n}  Javascript  var text = new kintoneUIComponent.Text({value: 'input text'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(text.render());\n\ntext.setValue('input text');", 
            "title": "setValue(value)"
        }, 
        {
            "location": "/Reference/Text/#getvalue", 
            "text": "Get the value of text field.  Parameter  None  Returns     Name  Type  Description      value  String  The value of text field.      Sample  React  import { Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: '1'}\n\n    render() {\n        return (\n         div \n           Text value={this.state.value} onChange={(value) =  {this.setState({value})}} / \n           button onClick={this.handleClick} Click /button \n         /div \n      );\n    }\n    handleClick= () =  {\n        console.log(this.state.value);\n    };\n}  Javascript  var text = new kintoneUIComponent.Text({value: 'input text'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(text.render());\n\ntext.getValue();", 
            "title": "getValue()"
        }, 
        {
            "location": "/Reference/Text/#oneventname-callback", 
            "text": "Register callback for a event of component  Parameter     Name  Type  Required  Description      eventName  String  Yes  Name of event:  'click' 'change'    callback  function  Yes  callback     Returns  None   Sample  React  import { Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: '1'}\n    render() {\n        return (\n             Text value={this.state.value} onChange={this.handleChange.bind(this)} onClick={() =  {console.log('click')}} / \n        );\n    }\n    handleChange(value) {\n            this.setState({value});\n            console.log('value: ' + value);\n        }\n}  Javascript  var text = new kintoneUIComponent.Text({value: 'input text'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(text.render());\n\ntext.on('click', function(event) {\n    console.log('on click');\n});", 
            "title": "on(eventName, callBack)"
        }, 
        {
            "location": "/Reference/Text/#show", 
            "text": "Display the Text field.  Parameter  None  Returns  None   Sample  React  import { Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: '1'}\n    render() {\n        return (\n             Text value={this.state.value} onChange={this.handleChange.bind(this)} isVisible={true} / \n        );\n        handleChange(value) {\n            this.setState({value});\n            console.log('value: ' + value);\n        }\n    }\n}  Javascript  var text = new kintoneUIComponent.Text({value: 'input text'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(text.render());\n\ntext.show();", 
            "title": "show()"
        }, 
        {
            "location": "/Reference/Text/#hide", 
            "text": "Hide the Text field.  Parameter  None  Returns  None   Sample  React  import { Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: '1'}\n    render() {\n        return (\n             Text value={this.state.value} onChange={this.handleChange.bind(this)} isVisible={false} / \n        );\n        handleChange(value) {\n            this.setState({value});\n            console.log('value: ' + value);\n        }\n    }\n}  Javascript  var text = new kintoneUIComponent.Text({value: 'input text'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(text.render());\n\ntext.hide();", 
            "title": "hide()"
        }, 
        {
            "location": "/Reference/Text/#disable", 
            "text": "Disabled the Text field.  Parameter  None  Returns  None   Sample  React  import { Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: '1'}\n    render() {\n        return (\n             Text value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={true} / \n        );\n        handleChange(value) {\n            this.setState({value});\n            console.log('value: ' + value);\n        }\n    }\n}  Javascript  var text = new kintoneUIComponent.Text({value: 'input text'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(text.render());\n\ntext.disable();", 
            "title": "disable()"
        }, 
        {
            "location": "/Reference/Text/#enable", 
            "text": "Enabled the Text field.  Parameter  None  Returns  None   Sample  React  import { Text} from 'kintone-ui-component';\nimport React from 'react';\n\nexport default class Plugin extends React.Component {\n    state = { value: '1'}\n    render() {\n        return (\n             Text value={this.state.value} onChange={this.handleChange.bind(this)} isDisabled={false} / \n        );\n        handleChange(value) {\n            this.setState({value});\n            console.log('value: ' + value);\n        }\n    }\n}  Javascript  var text = new kintoneUIComponent.Text({value: 'input text'});\nvar body = document.getElementsByTagName( BODY )[0];\nbody.appendChild(text.render());\n\ntext.enable();", 
            "title": "enable()"
        }
    ]
}